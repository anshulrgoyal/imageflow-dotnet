### YamlMime:ManagedReference
items:
- uid: Imageflow.Fluent.ImageJob
  commentId: T:Imageflow.Fluent.ImageJob
  id: ImageJob
  parent: Imageflow.Fluent
  children:
  - Imageflow.Fluent.ImageJob.BuildCommandString(Imageflow.Fluent.IBytesSource,Imageflow.Fluent.IOutputDestination,System.String)
  - Imageflow.Fluent.ImageJob.BuildCommandString(Imageflow.Fluent.IBytesSource,Imageflow.Fluent.IOutputDestination,System.String,System.Collections.Generic.ICollection{Imageflow.Fluent.InputWatermark})
  - Imageflow.Fluent.ImageJob.BuildCommandString(Imageflow.Fluent.IBytesSource,System.Nullable{System.Int32},Imageflow.Fluent.IOutputDestination,System.Nullable{System.Int32},System.String)
  - Imageflow.Fluent.ImageJob.BuildCommandString(Imageflow.Fluent.IBytesSource,System.Nullable{System.Int32},Imageflow.Fluent.IOutputDestination,System.Nullable{System.Int32},System.String,System.Collections.Generic.ICollection{Imageflow.Fluent.InputWatermark})
  - Imageflow.Fluent.ImageJob.BuildCommandString(System.Byte[],Imageflow.Fluent.IOutputDestination,System.String)
  - Imageflow.Fluent.ImageJob.CanDecodeBytes(System.Byte[])
  - Imageflow.Fluent.ImageJob.CreateCanvasBgr32(System.UInt32,System.UInt32,Imageflow.Fluent.AnyColor)
  - Imageflow.Fluent.ImageJob.CreateCanvasBgra32(System.UInt32,System.UInt32,Imageflow.Fluent.AnyColor)
  - Imageflow.Fluent.ImageJob.Decode(Imageflow.Fluent.IBytesSource)
  - Imageflow.Fluent.ImageJob.Decode(Imageflow.Fluent.IBytesSource,Imageflow.Fluent.DecodeCommands)
  - Imageflow.Fluent.ImageJob.Decode(Imageflow.Fluent.IBytesSource,System.Int32)
  - Imageflow.Fluent.ImageJob.Decode(Imageflow.Fluent.IBytesSource,System.Int32,Imageflow.Fluent.DecodeCommands)
  - Imageflow.Fluent.ImageJob.Decode(System.ArraySegment{System.Byte})
  - Imageflow.Fluent.ImageJob.Decode(System.ArraySegment{System.Byte},System.Int32)
  - Imageflow.Fluent.ImageJob.Decode(System.Byte[])
  - Imageflow.Fluent.ImageJob.Decode(System.Byte[],System.Int32)
  - Imageflow.Fluent.ImageJob.Decode(System.IO.Stream,System.Boolean)
  - Imageflow.Fluent.ImageJob.Decode(System.IO.Stream,System.Boolean,System.Int32)
  - Imageflow.Fluent.ImageJob.Dispose
  - Imageflow.Fluent.ImageJob.Dispose(System.Boolean)
  - Imageflow.Fluent.ImageJob.Finish
  - Imageflow.Fluent.ImageJob.FinishAndDisposeAsync(System.Threading.CancellationToken)
  - Imageflow.Fluent.ImageJob.FinishAsync
  - Imageflow.Fluent.ImageJob.FinishAsync(System.Threading.CancellationToken)
  - Imageflow.Fluent.ImageJob.FinishInSubprocessAsync(System.Threading.CancellationToken,System.String,System.Nullable{System.Int64})
  - Imageflow.Fluent.ImageJob.GenerateIoId
  - Imageflow.Fluent.ImageJob.GetContentTypeForBytes(System.Byte[])
  - Imageflow.Fluent.ImageJob.GetImageInfo(Imageflow.Fluent.IBytesSource)
  - Imageflow.Fluent.ImageJob.GetImageInfo(Imageflow.Fluent.IBytesSource,System.Threading.CancellationToken)
  - Imageflow.Fluent.ImageJob.WriteJsonJobAndInputs(System.Threading.CancellationToken,System.Boolean)
  langs:
  - csharp
  - vb
  name: ImageJob
  nameWithType: ImageJob
  fullName: Imageflow.Fluent.ImageJob
  type: Class
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: ImageJob
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 21
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: 'public class ImageJob : IDisposable'
    content.vb: >-
      Public Class ImageJob
          Implements IDisposable
  inheritance:
  - System.Object
  derivedClasses:
  - Imageflow.Fluent.FluentBuildJob
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Imageflow.Fluent.ImageJob.Decode(Imageflow.Fluent.IBytesSource,Imageflow.Fluent.DecodeCommands)
  commentId: M:Imageflow.Fluent.ImageJob.Decode(Imageflow.Fluent.IBytesSource,Imageflow.Fluent.DecodeCommands)
  id: Decode(Imageflow.Fluent.IBytesSource,Imageflow.Fluent.DecodeCommands)
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: Decode(IBytesSource, DecodeCommands)
  nameWithType: ImageJob.Decode(IBytesSource, DecodeCommands)
  fullName: Imageflow.Fluent.ImageJob.Decode(Imageflow.Fluent.IBytesSource, Imageflow.Fluent.DecodeCommands)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Decode
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 47
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nDecode an image into a frame\n"
  example: []
  syntax:
    content: public BuildNode Decode(IBytesSource source, DecodeCommands commands)
    parameters:
    - id: source
      type: Imageflow.Fluent.IBytesSource
      description: Use BytesSource or StreamSource
    - id: commands
      type: Imageflow.Fluent.DecodeCommands
      description: Commands to the decoder, such as JPEG or WebP block-wise downscaling for performance, or to discard the color profile
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function Decode(source As IBytesSource, commands As DecodeCommands) As BuildNode
  overload: Imageflow.Fluent.ImageJob.Decode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.ImageJob.Decode(Imageflow.Fluent.IBytesSource,System.Int32,Imageflow.Fluent.DecodeCommands)
  commentId: M:Imageflow.Fluent.ImageJob.Decode(Imageflow.Fluent.IBytesSource,System.Int32,Imageflow.Fluent.DecodeCommands)
  id: Decode(Imageflow.Fluent.IBytesSource,System.Int32,Imageflow.Fluent.DecodeCommands)
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: Decode(IBytesSource, Int32, DecodeCommands)
  nameWithType: ImageJob.Decode(IBytesSource, Int32, DecodeCommands)
  fullName: Imageflow.Fluent.ImageJob.Decode(Imageflow.Fluent.IBytesSource, System.Int32, Imageflow.Fluent.DecodeCommands)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Decode
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 49
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public BuildNode Decode(IBytesSource source, int ioId, DecodeCommands commands)
    parameters:
    - id: source
      type: Imageflow.Fluent.IBytesSource
    - id: ioId
      type: System.Int32
    - id: commands
      type: Imageflow.Fluent.DecodeCommands
    return:
      type: Imageflow.Fluent.BuildNode
    content.vb: Public Function Decode(source As IBytesSource, ioId As Integer, commands As DecodeCommands) As BuildNode
  overload: Imageflow.Fluent.ImageJob.Decode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.ImageJob.Decode(Imageflow.Fluent.IBytesSource,System.Int32)
  commentId: M:Imageflow.Fluent.ImageJob.Decode(Imageflow.Fluent.IBytesSource,System.Int32)
  id: Decode(Imageflow.Fluent.IBytesSource,System.Int32)
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: Decode(IBytesSource, Int32)
  nameWithType: ImageJob.Decode(IBytesSource, Int32)
  fullName: Imageflow.Fluent.ImageJob.Decode(Imageflow.Fluent.IBytesSource, System.Int32)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Decode
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 74
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public BuildNode Decode(IBytesSource source, int ioId)
    parameters:
    - id: source
      type: Imageflow.Fluent.IBytesSource
    - id: ioId
      type: System.Int32
    return:
      type: Imageflow.Fluent.BuildNode
    content.vb: Public Function Decode(source As IBytesSource, ioId As Integer) As BuildNode
  overload: Imageflow.Fluent.ImageJob.Decode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.ImageJob.Decode(Imageflow.Fluent.IBytesSource)
  commentId: M:Imageflow.Fluent.ImageJob.Decode(Imageflow.Fluent.IBytesSource)
  id: Decode(Imageflow.Fluent.IBytesSource)
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: Decode(IBytesSource)
  nameWithType: ImageJob.Decode(IBytesSource)
  fullName: Imageflow.Fluent.ImageJob.Decode(Imageflow.Fluent.IBytesSource)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Decode
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 75
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public BuildNode Decode(IBytesSource source)
    parameters:
    - id: source
      type: Imageflow.Fluent.IBytesSource
    return:
      type: Imageflow.Fluent.BuildNode
    content.vb: Public Function Decode(source As IBytesSource) As BuildNode
  overload: Imageflow.Fluent.ImageJob.Decode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.ImageJob.Decode(System.ArraySegment{System.Byte})
  commentId: M:Imageflow.Fluent.ImageJob.Decode(System.ArraySegment{System.Byte})
  id: Decode(System.ArraySegment{System.Byte})
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: Decode(ArraySegment<Byte>)
  nameWithType: ImageJob.Decode(ArraySegment<Byte>)
  fullName: Imageflow.Fluent.ImageJob.Decode(System.ArraySegment<System.Byte>)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Decode
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 76
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public BuildNode Decode(ArraySegment<byte> source)
    parameters:
    - id: source
      type: System.ArraySegment{System.Byte}
    return:
      type: Imageflow.Fluent.BuildNode
    content.vb: Public Function Decode(source As ArraySegment(Of Byte)) As BuildNode
  overload: Imageflow.Fluent.ImageJob.Decode*
  nameWithType.vb: ImageJob.Decode(ArraySegment(Of Byte))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Imageflow.Fluent.ImageJob.Decode(System.ArraySegment(Of System.Byte))
  name.vb: Decode(ArraySegment(Of Byte))
- uid: Imageflow.Fluent.ImageJob.Decode(System.Byte[])
  commentId: M:Imageflow.Fluent.ImageJob.Decode(System.Byte[])
  id: Decode(System.Byte[])
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: Decode(Byte[])
  nameWithType: ImageJob.Decode(Byte[])
  fullName: Imageflow.Fluent.ImageJob.Decode(System.Byte[])
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Decode
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 77
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public BuildNode Decode(byte[] source)
    parameters:
    - id: source
      type: System.Byte[]
    return:
      type: Imageflow.Fluent.BuildNode
    content.vb: Public Function Decode(source As Byte()) As BuildNode
  overload: Imageflow.Fluent.ImageJob.Decode*
  nameWithType.vb: ImageJob.Decode(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Imageflow.Fluent.ImageJob.Decode(System.Byte())
  name.vb: Decode(Byte())
- uid: Imageflow.Fluent.ImageJob.Decode(System.IO.Stream,System.Boolean)
  commentId: M:Imageflow.Fluent.ImageJob.Decode(System.IO.Stream,System.Boolean)
  id: Decode(System.IO.Stream,System.Boolean)
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: Decode(Stream, Boolean)
  nameWithType: ImageJob.Decode(Stream, Boolean)
  fullName: Imageflow.Fluent.ImageJob.Decode(System.IO.Stream, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Decode
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 82
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nDecode an image into a frame\n"
  example: []
  syntax:
    content: public BuildNode Decode(Stream source, bool disposeStream)
    parameters:
    - id: source
      type: System.IO.Stream
    - id: disposeStream
      type: System.Boolean
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function Decode(source As Stream, disposeStream As Boolean) As BuildNode
  overload: Imageflow.Fluent.ImageJob.Decode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.ImageJob.Decode(System.ArraySegment{System.Byte},System.Int32)
  commentId: M:Imageflow.Fluent.ImageJob.Decode(System.ArraySegment{System.Byte},System.Int32)
  id: Decode(System.ArraySegment{System.Byte},System.Int32)
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: Decode(ArraySegment<Byte>, Int32)
  nameWithType: ImageJob.Decode(ArraySegment<Byte>, Int32)
  fullName: Imageflow.Fluent.ImageJob.Decode(System.ArraySegment<System.Byte>, System.Int32)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Decode
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 83
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: >-
      [Obsolete("Use Decode(IBytesSource source, int ioId)")]

      public BuildNode Decode(ArraySegment<byte> source, int ioId)
    parameters:
    - id: source
      type: System.ArraySegment{System.Byte}
    - id: ioId
      type: System.Int32
    return:
      type: Imageflow.Fluent.BuildNode
    content.vb: >-
      <Obsolete("Use Decode(IBytesSource source, int ioId)")>

      Public Function Decode(source As ArraySegment(Of Byte), ioId As Integer) As BuildNode
  overload: Imageflow.Fluent.ImageJob.Decode*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use Decode(IBytesSource source, int ioId)
  nameWithType.vb: ImageJob.Decode(ArraySegment(Of Byte), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Imageflow.Fluent.ImageJob.Decode(System.ArraySegment(Of System.Byte), System.Int32)
  name.vb: Decode(ArraySegment(Of Byte), Int32)
- uid: Imageflow.Fluent.ImageJob.Decode(System.Byte[],System.Int32)
  commentId: M:Imageflow.Fluent.ImageJob.Decode(System.Byte[],System.Int32)
  id: Decode(System.Byte[],System.Int32)
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: Decode(Byte[], Int32)
  nameWithType: ImageJob.Decode(Byte[], Int32)
  fullName: Imageflow.Fluent.ImageJob.Decode(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Decode
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 85
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: >-
      [Obsolete("Use Decode(IBytesSource source, int ioId)")]

      public BuildNode Decode(byte[] source, int ioId)
    parameters:
    - id: source
      type: System.Byte[]
    - id: ioId
      type: System.Int32
    return:
      type: Imageflow.Fluent.BuildNode
    content.vb: >-
      <Obsolete("Use Decode(IBytesSource source, int ioId)")>

      Public Function Decode(source As Byte(), ioId As Integer) As BuildNode
  overload: Imageflow.Fluent.ImageJob.Decode*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use Decode(IBytesSource source, int ioId)
  nameWithType.vb: ImageJob.Decode(Byte(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Imageflow.Fluent.ImageJob.Decode(System.Byte(), System.Int32)
  name.vb: Decode(Byte(), Int32)
- uid: Imageflow.Fluent.ImageJob.Decode(System.IO.Stream,System.Boolean,System.Int32)
  commentId: M:Imageflow.Fluent.ImageJob.Decode(System.IO.Stream,System.Boolean,System.Int32)
  id: Decode(System.IO.Stream,System.Boolean,System.Int32)
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: Decode(Stream, Boolean, Int32)
  nameWithType: ImageJob.Decode(Stream, Boolean, Int32)
  fullName: Imageflow.Fluent.ImageJob.Decode(System.IO.Stream, System.Boolean, System.Int32)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Decode
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 87
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public BuildNode Decode(Stream source, bool disposeStream, int ioId)
    parameters:
    - id: source
      type: System.IO.Stream
    - id: disposeStream
      type: System.Boolean
    - id: ioId
      type: System.Int32
    return:
      type: Imageflow.Fluent.BuildNode
    content.vb: Public Function Decode(source As Stream, disposeStream As Boolean, ioId As Integer) As BuildNode
  overload: Imageflow.Fluent.ImageJob.Decode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.ImageJob.CreateCanvasBgra32(System.UInt32,System.UInt32,Imageflow.Fluent.AnyColor)
  commentId: M:Imageflow.Fluent.ImageJob.CreateCanvasBgra32(System.UInt32,System.UInt32,Imageflow.Fluent.AnyColor)
  id: CreateCanvasBgra32(System.UInt32,System.UInt32,Imageflow.Fluent.AnyColor)
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: CreateCanvasBgra32(UInt32, UInt32, AnyColor)
  nameWithType: ImageJob.CreateCanvasBgra32(UInt32, UInt32, AnyColor)
  fullName: Imageflow.Fluent.ImageJob.CreateCanvasBgra32(System.UInt32, System.UInt32, Imageflow.Fluent.AnyColor)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: CreateCanvasBgra32
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 90
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public BuildNode CreateCanvasBgra32(uint w, uint h, AnyColor color)
    parameters:
    - id: w
      type: System.UInt32
    - id: h
      type: System.UInt32
    - id: color
      type: Imageflow.Fluent.AnyColor
    return:
      type: Imageflow.Fluent.BuildNode
    content.vb: Public Function CreateCanvasBgra32(w As UInteger, h As UInteger, color As AnyColor) As BuildNode
  overload: Imageflow.Fluent.ImageJob.CreateCanvasBgra32*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.ImageJob.CreateCanvasBgr32(System.UInt32,System.UInt32,Imageflow.Fluent.AnyColor)
  commentId: M:Imageflow.Fluent.ImageJob.CreateCanvasBgr32(System.UInt32,System.UInt32,Imageflow.Fluent.AnyColor)
  id: CreateCanvasBgr32(System.UInt32,System.UInt32,Imageflow.Fluent.AnyColor)
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: CreateCanvasBgr32(UInt32, UInt32, AnyColor)
  nameWithType: ImageJob.CreateCanvasBgr32(UInt32, UInt32, AnyColor)
  fullName: Imageflow.Fluent.ImageJob.CreateCanvasBgr32(System.UInt32, System.UInt32, Imageflow.Fluent.AnyColor)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: CreateCanvasBgr32
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 93
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public BuildNode CreateCanvasBgr32(uint w, uint h, AnyColor color)
    parameters:
    - id: w
      type: System.UInt32
    - id: h
      type: System.UInt32
    - id: color
      type: Imageflow.Fluent.AnyColor
    return:
      type: Imageflow.Fluent.BuildNode
    content.vb: Public Function CreateCanvasBgr32(w As UInteger, h As UInteger, color As AnyColor) As BuildNode
  overload: Imageflow.Fluent.ImageJob.CreateCanvasBgr32*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.ImageJob.BuildCommandString(System.Byte[],Imageflow.Fluent.IOutputDestination,System.String)
  commentId: M:Imageflow.Fluent.ImageJob.BuildCommandString(System.Byte[],Imageflow.Fluent.IOutputDestination,System.String)
  id: BuildCommandString(System.Byte[],Imageflow.Fluent.IOutputDestination,System.String)
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: BuildCommandString(Byte[], IOutputDestination, String)
  nameWithType: ImageJob.BuildCommandString(Byte[], IOutputDestination, String)
  fullName: Imageflow.Fluent.ImageJob.BuildCommandString(System.Byte[], Imageflow.Fluent.IOutputDestination, System.String)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: BuildCommandString
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 101
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public BuildEndpoint BuildCommandString(byte[] source, IOutputDestination dest, string commandString)
    parameters:
    - id: source
      type: System.Byte[]
    - id: dest
      type: Imageflow.Fluent.IOutputDestination
    - id: commandString
      type: System.String
    return:
      type: Imageflow.Fluent.BuildEndpoint
    content.vb: Public Function BuildCommandString(source As Byte(), dest As IOutputDestination, commandString As String) As BuildEndpoint
  overload: Imageflow.Fluent.ImageJob.BuildCommandString*
  nameWithType.vb: ImageJob.BuildCommandString(Byte(), IOutputDestination, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Imageflow.Fluent.ImageJob.BuildCommandString(System.Byte(), Imageflow.Fluent.IOutputDestination, System.String)
  name.vb: BuildCommandString(Byte(), IOutputDestination, String)
- uid: Imageflow.Fluent.ImageJob.BuildCommandString(Imageflow.Fluent.IBytesSource,Imageflow.Fluent.IOutputDestination,System.String)
  commentId: M:Imageflow.Fluent.ImageJob.BuildCommandString(Imageflow.Fluent.IBytesSource,Imageflow.Fluent.IOutputDestination,System.String)
  id: BuildCommandString(Imageflow.Fluent.IBytesSource,Imageflow.Fluent.IOutputDestination,System.String)
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: BuildCommandString(IBytesSource, IOutputDestination, String)
  nameWithType: ImageJob.BuildCommandString(IBytesSource, IOutputDestination, String)
  fullName: Imageflow.Fluent.ImageJob.BuildCommandString(Imageflow.Fluent.IBytesSource, Imageflow.Fluent.IOutputDestination, System.String)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: BuildCommandString
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 103
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public BuildEndpoint BuildCommandString(IBytesSource source, IOutputDestination dest, string commandString)
    parameters:
    - id: source
      type: Imageflow.Fluent.IBytesSource
    - id: dest
      type: Imageflow.Fluent.IOutputDestination
    - id: commandString
      type: System.String
    return:
      type: Imageflow.Fluent.BuildEndpoint
    content.vb: Public Function BuildCommandString(source As IBytesSource, dest As IOutputDestination, commandString As String) As BuildEndpoint
  overload: Imageflow.Fluent.ImageJob.BuildCommandString*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.ImageJob.BuildCommandString(Imageflow.Fluent.IBytesSource,System.Nullable{System.Int32},Imageflow.Fluent.IOutputDestination,System.Nullable{System.Int32},System.String)
  commentId: M:Imageflow.Fluent.ImageJob.BuildCommandString(Imageflow.Fluent.IBytesSource,System.Nullable{System.Int32},Imageflow.Fluent.IOutputDestination,System.Nullable{System.Int32},System.String)
  id: BuildCommandString(Imageflow.Fluent.IBytesSource,System.Nullable{System.Int32},Imageflow.Fluent.IOutputDestination,System.Nullable{System.Int32},System.String)
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: BuildCommandString(IBytesSource, Nullable<Int32>, IOutputDestination, Nullable<Int32>, String)
  nameWithType: ImageJob.BuildCommandString(IBytesSource, Nullable<Int32>, IOutputDestination, Nullable<Int32>, String)
  fullName: Imageflow.Fluent.ImageJob.BuildCommandString(Imageflow.Fluent.IBytesSource, System.Nullable<System.Int32>, Imageflow.Fluent.IOutputDestination, System.Nullable<System.Int32>, System.String)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: BuildCommandString
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 106
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public BuildEndpoint BuildCommandString(IBytesSource source, int? sourceIoId, IOutputDestination dest, int? destIoId, string commandString)
    parameters:
    - id: source
      type: Imageflow.Fluent.IBytesSource
    - id: sourceIoId
      type: System.Nullable{System.Int32}
    - id: dest
      type: Imageflow.Fluent.IOutputDestination
    - id: destIoId
      type: System.Nullable{System.Int32}
    - id: commandString
      type: System.String
    return:
      type: Imageflow.Fluent.BuildEndpoint
    content.vb: Public Function BuildCommandString(source As IBytesSource, sourceIoId As Integer?, dest As IOutputDestination, destIoId As Integer?, commandString As String) As BuildEndpoint
  overload: Imageflow.Fluent.ImageJob.BuildCommandString*
  nameWithType.vb: ImageJob.BuildCommandString(IBytesSource, Nullable(Of Int32), IOutputDestination, Nullable(Of Int32), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Imageflow.Fluent.ImageJob.BuildCommandString(Imageflow.Fluent.IBytesSource, System.Nullable(Of System.Int32), Imageflow.Fluent.IOutputDestination, System.Nullable(Of System.Int32), System.String)
  name.vb: BuildCommandString(IBytesSource, Nullable(Of Int32), IOutputDestination, Nullable(Of Int32), String)
- uid: Imageflow.Fluent.ImageJob.BuildCommandString(Imageflow.Fluent.IBytesSource,Imageflow.Fluent.IOutputDestination,System.String,System.Collections.Generic.ICollection{Imageflow.Fluent.InputWatermark})
  commentId: M:Imageflow.Fluent.ImageJob.BuildCommandString(Imageflow.Fluent.IBytesSource,Imageflow.Fluent.IOutputDestination,System.String,System.Collections.Generic.ICollection{Imageflow.Fluent.InputWatermark})
  id: BuildCommandString(Imageflow.Fluent.IBytesSource,Imageflow.Fluent.IOutputDestination,System.String,System.Collections.Generic.ICollection{Imageflow.Fluent.InputWatermark})
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: BuildCommandString(IBytesSource, IOutputDestination, String, ICollection<InputWatermark>)
  nameWithType: ImageJob.BuildCommandString(IBytesSource, IOutputDestination, String, ICollection<InputWatermark>)
  fullName: Imageflow.Fluent.ImageJob.BuildCommandString(Imageflow.Fluent.IBytesSource, Imageflow.Fluent.IOutputDestination, System.String, System.Collections.Generic.ICollection<Imageflow.Fluent.InputWatermark>)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: BuildCommandString
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 120
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nModify the input image (source) with the given command string and watermarks and encode to the (dest) \n"
  example: []
  syntax:
    content: public BuildEndpoint BuildCommandString(IBytesSource source, IOutputDestination dest, string commandString, ICollection<InputWatermark> watermarks)
    parameters:
    - id: source
      type: Imageflow.Fluent.IBytesSource
      description: ''
    - id: dest
      type: Imageflow.Fluent.IOutputDestination
      description: ''
    - id: commandString
      type: System.String
      description: ''
    - id: watermarks
      type: System.Collections.Generic.ICollection{Imageflow.Fluent.InputWatermark}
      description: ''
    return:
      type: Imageflow.Fluent.BuildEndpoint
      description: ''
    content.vb: Public Function BuildCommandString(source As IBytesSource, dest As IOutputDestination, commandString As String, watermarks As ICollection(Of InputWatermark)) As BuildEndpoint
  overload: Imageflow.Fluent.ImageJob.BuildCommandString*
  nameWithType.vb: ImageJob.BuildCommandString(IBytesSource, IOutputDestination, String, ICollection(Of InputWatermark))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Imageflow.Fluent.ImageJob.BuildCommandString(Imageflow.Fluent.IBytesSource, Imageflow.Fluent.IOutputDestination, System.String, System.Collections.Generic.ICollection(Of Imageflow.Fluent.InputWatermark))
  name.vb: BuildCommandString(IBytesSource, IOutputDestination, String, ICollection(Of InputWatermark))
- uid: Imageflow.Fluent.ImageJob.BuildCommandString(Imageflow.Fluent.IBytesSource,System.Nullable{System.Int32},Imageflow.Fluent.IOutputDestination,System.Nullable{System.Int32},System.String,System.Collections.Generic.ICollection{Imageflow.Fluent.InputWatermark})
  commentId: M:Imageflow.Fluent.ImageJob.BuildCommandString(Imageflow.Fluent.IBytesSource,System.Nullable{System.Int32},Imageflow.Fluent.IOutputDestination,System.Nullable{System.Int32},System.String,System.Collections.Generic.ICollection{Imageflow.Fluent.InputWatermark})
  id: BuildCommandString(Imageflow.Fluent.IBytesSource,System.Nullable{System.Int32},Imageflow.Fluent.IOutputDestination,System.Nullable{System.Int32},System.String,System.Collections.Generic.ICollection{Imageflow.Fluent.InputWatermark})
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: BuildCommandString(IBytesSource, Nullable<Int32>, IOutputDestination, Nullable<Int32>, String, ICollection<InputWatermark>)
  nameWithType: ImageJob.BuildCommandString(IBytesSource, Nullable<Int32>, IOutputDestination, Nullable<Int32>, String, ICollection<InputWatermark>)
  fullName: Imageflow.Fluent.ImageJob.BuildCommandString(Imageflow.Fluent.IBytesSource, System.Nullable<System.Int32>, Imageflow.Fluent.IOutputDestination, System.Nullable<System.Int32>, System.String, System.Collections.Generic.ICollection<Imageflow.Fluent.InputWatermark>)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: BuildCommandString
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 123
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public BuildEndpoint BuildCommandString(IBytesSource source, int? sourceIoId, IOutputDestination dest, int? destIoId, string commandString, ICollection<InputWatermark> watermarks)
    parameters:
    - id: source
      type: Imageflow.Fluent.IBytesSource
    - id: sourceIoId
      type: System.Nullable{System.Int32}
    - id: dest
      type: Imageflow.Fluent.IOutputDestination
    - id: destIoId
      type: System.Nullable{System.Int32}
    - id: commandString
      type: System.String
    - id: watermarks
      type: System.Collections.Generic.ICollection{Imageflow.Fluent.InputWatermark}
    return:
      type: Imageflow.Fluent.BuildEndpoint
    content.vb: Public Function BuildCommandString(source As IBytesSource, sourceIoId As Integer?, dest As IOutputDestination, destIoId As Integer?, commandString As String, watermarks As ICollection(Of InputWatermark)) As BuildEndpoint
  overload: Imageflow.Fluent.ImageJob.BuildCommandString*
  nameWithType.vb: ImageJob.BuildCommandString(IBytesSource, Nullable(Of Int32), IOutputDestination, Nullable(Of Int32), String, ICollection(Of InputWatermark))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Imageflow.Fluent.ImageJob.BuildCommandString(Imageflow.Fluent.IBytesSource, System.Nullable(Of System.Int32), Imageflow.Fluent.IOutputDestination, System.Nullable(Of System.Int32), System.String, System.Collections.Generic.ICollection(Of Imageflow.Fluent.InputWatermark))
  name.vb: BuildCommandString(IBytesSource, Nullable(Of Int32), IOutputDestination, Nullable(Of Int32), String, ICollection(Of InputWatermark))
- uid: Imageflow.Fluent.ImageJob.Finish
  commentId: M:Imageflow.Fluent.ImageJob.Finish
  id: Finish
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: Finish()
  nameWithType: ImageJob.Finish()
  fullName: Imageflow.Fluent.ImageJob.Finish()
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Finish
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 159
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nComplete the job and set execution options\n"
  example: []
  syntax:
    content: public FinishJobBuilder Finish()
    return:
      type: Imageflow.Fluent.FinishJobBuilder
      description: ''
    content.vb: Public Function Finish As FinishJobBuilder
  overload: Imageflow.Fluent.ImageJob.Finish*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.ImageJob.FinishAsync
  commentId: M:Imageflow.Fluent.ImageJob.FinishAsync
  id: FinishAsync
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: FinishAsync()
  nameWithType: ImageJob.FinishAsync()
  fullName: Imageflow.Fluent.ImageJob.FinishAsync()
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: FinishAsync
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 161
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: >-
      [Obsolete("Use .Finish().InProcessAsync()")]

      public Task<BuildJobResult> FinishAsync()
    return:
      type: System.Threading.Tasks.Task{Imageflow.Fluent.BuildJobResult}
    content.vb: >-
      <Obsolete("Use .Finish().InProcessAsync()")>

      Public Function FinishAsync As Task(Of BuildJobResult)
  overload: Imageflow.Fluent.ImageJob.FinishAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use .Finish().InProcessAsync()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.ImageJob.FinishAsync(System.Threading.CancellationToken)
  commentId: M:Imageflow.Fluent.ImageJob.FinishAsync(System.Threading.CancellationToken)
  id: FinishAsync(System.Threading.CancellationToken)
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: FinishAsync(CancellationToken)
  nameWithType: ImageJob.FinishAsync(CancellationToken)
  fullName: Imageflow.Fluent.ImageJob.FinishAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: FinishAsync
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 164
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: >-
      [Obsolete("Use .Finish().SetCancellationToken(t).InProcessAsync()")]

      public Task<BuildJobResult> FinishAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Imageflow.Fluent.BuildJobResult}
    content.vb: >-
      <Obsolete("Use .Finish().SetCancellationToken(t).InProcessAsync()")>

      Public Function FinishAsync(cancellationToken As CancellationToken) As Task(Of BuildJobResult)
  overload: Imageflow.Fluent.ImageJob.FinishAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use .Finish().SetCancellationToken(t).InProcessAsync()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.ImageJob.FinishInSubprocessAsync(System.Threading.CancellationToken,System.String,System.Nullable{System.Int64})
  commentId: M:Imageflow.Fluent.ImageJob.FinishInSubprocessAsync(System.Threading.CancellationToken,System.String,System.Nullable{System.Int64})
  id: FinishInSubprocessAsync(System.Threading.CancellationToken,System.String,System.Nullable{System.Int64})
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: FinishInSubprocessAsync(CancellationToken, String, Nullable<Int64>)
  nameWithType: ImageJob.FinishInSubprocessAsync(CancellationToken, String, Nullable<Int64>)
  fullName: Imageflow.Fluent.ImageJob.FinishInSubprocessAsync(System.Threading.CancellationToken, System.String, System.Nullable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: FinishInSubprocessAsync
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 168
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: >-
      [Obsolete("Use .Finish().SetCancellationToken(cancellationToken).InSubprocessAsync(imageflowToolPath, outputBufferCapacity)")]

      public Task<BuildJobResult> FinishInSubprocessAsync(CancellationToken cancellationToken, string imageflowToolPath, long? outputBufferCapacity = default(long? ))
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    - id: imageflowToolPath
      type: System.String
    - id: outputBufferCapacity
      type: System.Nullable{System.Int64}
    return:
      type: System.Threading.Tasks.Task{Imageflow.Fluent.BuildJobResult}
    content.vb: >-
      <Obsolete("Use .Finish().SetCancellationToken(cancellationToken).InSubprocessAsync(imageflowToolPath, outputBufferCapacity)")>

      Public Function FinishInSubprocessAsync(cancellationToken As CancellationToken, imageflowToolPath As String, outputBufferCapacity As Long? = Nothing) As Task(Of BuildJobResult)
  overload: Imageflow.Fluent.ImageJob.FinishInSubprocessAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use .Finish().SetCancellationToken(cancellationToken).InSubprocessAsync(imageflowToolPath, outputBufferCapacity)
  nameWithType.vb: ImageJob.FinishInSubprocessAsync(CancellationToken, String, Nullable(Of Int64))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Imageflow.Fluent.ImageJob.FinishInSubprocessAsync(System.Threading.CancellationToken, System.String, System.Nullable(Of System.Int64))
  name.vb: FinishInSubprocessAsync(CancellationToken, String, Nullable(Of Int64))
- uid: Imageflow.Fluent.ImageJob.WriteJsonJobAndInputs(System.Threading.CancellationToken,System.Boolean)
  commentId: M:Imageflow.Fluent.ImageJob.WriteJsonJobAndInputs(System.Threading.CancellationToken,System.Boolean)
  id: WriteJsonJobAndInputs(System.Threading.CancellationToken,System.Boolean)
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: WriteJsonJobAndInputs(CancellationToken, Boolean)
  nameWithType: ImageJob.WriteJsonJobAndInputs(CancellationToken, Boolean)
  fullName: Imageflow.Fluent.ImageJob.WriteJsonJobAndInputs(System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: WriteJsonJobAndInputs
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 174
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: >-
      [Obsolete("Use .Finish().SetCancellationToken(cancellationToken).WriteJsonJobAndInputs(deleteFilesOnDispose)")]

      public Task<IPreparedFilesystemJob> WriteJsonJobAndInputs(CancellationToken cancellationToken, bool deleteFilesOnDispose)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    - id: deleteFilesOnDispose
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task{Imageflow.Fluent.IPreparedFilesystemJob}
    content.vb: >-
      <Obsolete("Use .Finish().SetCancellationToken(cancellationToken).WriteJsonJobAndInputs(deleteFilesOnDispose)")>

      Public Function WriteJsonJobAndInputs(cancellationToken As CancellationToken, deleteFilesOnDispose As Boolean) As Task(Of IPreparedFilesystemJob)
  overload: Imageflow.Fluent.ImageJob.WriteJsonJobAndInputs*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use .Finish().SetCancellationToken(cancellationToken).WriteJsonJobAndInputs(deleteFilesOnDispose)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.ImageJob.FinishAndDisposeAsync(System.Threading.CancellationToken)
  commentId: M:Imageflow.Fluent.ImageJob.FinishAndDisposeAsync(System.Threading.CancellationToken)
  id: FinishAndDisposeAsync(System.Threading.CancellationToken)
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: FinishAndDisposeAsync(CancellationToken)
  nameWithType: ImageJob.FinishAndDisposeAsync(CancellationToken)
  fullName: Imageflow.Fluent.ImageJob.FinishAndDisposeAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: FinishAndDisposeAsync
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 178
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: >-
      [Obsolete("Use .Finish().SetCancellationToken(cancellationToken).InProcessAndDisposeAsync()")]

      public Task<BuildJobResult> FinishAndDisposeAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Imageflow.Fluent.BuildJobResult}
    content.vb: >-
      <Obsolete("Use .Finish().SetCancellationToken(cancellationToken).InProcessAndDisposeAsync()")>

      Public Function FinishAndDisposeAsync(cancellationToken As CancellationToken) As Task(Of BuildJobResult)
  overload: Imageflow.Fluent.ImageJob.FinishAndDisposeAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use .Finish().SetCancellationToken(cancellationToken).InProcessAndDisposeAsync()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.ImageJob.Dispose
  commentId: M:Imageflow.Fluent.ImageJob.Dispose
  id: Dispose
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ImageJob.Dispose()
  fullName: Imageflow.Fluent.ImageJob.Dispose()
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Dispose
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 522
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Imageflow.Fluent.ImageJob.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.ImageJob.Dispose(System.Boolean)
  commentId: M:Imageflow.Fluent.ImageJob.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: ImageJob.Dispose(Boolean)
  fullName: Imageflow.Fluent.ImageJob.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Dispose
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 530
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: Imageflow.Fluent.ImageJob.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Imageflow.Fluent.ImageJob.GenerateIoId
  commentId: M:Imageflow.Fluent.ImageJob.GenerateIoId
  id: GenerateIoId
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: GenerateIoId()
  nameWithType: ImageJob.GenerateIoId()
  fullName: Imageflow.Fluent.ImageJob.GenerateIoId()
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: GenerateIoId
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 547
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public int GenerateIoId()
    return:
      type: System.Int32
    content.vb: Public Function GenerateIoId As Integer
  overload: Imageflow.Fluent.ImageJob.GenerateIoId*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.ImageJob.GetImageInfo(Imageflow.Fluent.IBytesSource)
  commentId: M:Imageflow.Fluent.ImageJob.GetImageInfo(Imageflow.Fluent.IBytesSource)
  id: GetImageInfo(Imageflow.Fluent.IBytesSource)
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: GetImageInfo(IBytesSource)
  nameWithType: ImageJob.GetImageInfo(IBytesSource)
  fullName: Imageflow.Fluent.ImageJob.GetImageInfo(Imageflow.Fluent.IBytesSource)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: GetImageInfo
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 555
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nReturns dimensions and format of the provided image stream or byte array\n"
  example: []
  syntax:
    content: public static Task<ImageInfo> GetImageInfo(IBytesSource image)
    parameters:
    - id: image
      type: Imageflow.Fluent.IBytesSource
      description: ''
    return:
      type: System.Threading.Tasks.Task{Imageflow.Bindings.ImageInfo}
      description: ''
    content.vb: Public Shared Function GetImageInfo(image As IBytesSource) As Task(Of ImageInfo)
  overload: Imageflow.Fluent.ImageJob.GetImageInfo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Imageflow.Fluent.ImageJob.GetImageInfo(Imageflow.Fluent.IBytesSource,System.Threading.CancellationToken)
  commentId: M:Imageflow.Fluent.ImageJob.GetImageInfo(Imageflow.Fluent.IBytesSource,System.Threading.CancellationToken)
  id: GetImageInfo(Imageflow.Fluent.IBytesSource,System.Threading.CancellationToken)
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: GetImageInfo(IBytesSource, CancellationToken)
  nameWithType: ImageJob.GetImageInfo(IBytesSource, CancellationToken)
  fullName: Imageflow.Fluent.ImageJob.GetImageInfo(Imageflow.Fluent.IBytesSource, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: GetImageInfo
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 565
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nReturns dimensions and format of the provided image stream or byte array\n"
  example: []
  syntax:
    content: public static Task<ImageInfo> GetImageInfo(IBytesSource image, CancellationToken cancellationToken)
    parameters:
    - id: image
      type: Imageflow.Fluent.IBytesSource
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{Imageflow.Bindings.ImageInfo}
      description: ''
    content.vb: Public Shared Function GetImageInfo(image As IBytesSource, cancellationToken As CancellationToken) As Task(Of ImageInfo)
  overload: Imageflow.Fluent.ImageJob.GetImageInfo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Imageflow.Fluent.ImageJob.CanDecodeBytes(System.Byte[])
  commentId: M:Imageflow.Fluent.ImageJob.CanDecodeBytes(System.Byte[])
  id: CanDecodeBytes(System.Byte[])
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: CanDecodeBytes(Byte[])
  nameWithType: ImageJob.CanDecodeBytes(Byte[])
  fullName: Imageflow.Fluent.ImageJob.CanDecodeBytes(System.Byte[])
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: CanDecodeBytes
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 587
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nReturns true if it is likely that Imageflow can decode the given image based on the first 12 bytes of the file. \n"
  example: []
  syntax:
    content: public static bool CanDecodeBytes(byte[] first12Bytes)
    parameters:
    - id: first12Bytes
      type: System.Byte[]
      description: The first 12 or more bytes of the file
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function CanDecodeBytes(first12Bytes As Byte()) As Boolean
  overload: Imageflow.Fluent.ImageJob.CanDecodeBytes*
  nameWithType.vb: ImageJob.CanDecodeBytes(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Imageflow.Fluent.ImageJob.CanDecodeBytes(System.Byte())
  name.vb: CanDecodeBytes(Byte())
- uid: Imageflow.Fluent.ImageJob.GetContentTypeForBytes(System.Byte[])
  commentId: M:Imageflow.Fluent.ImageJob.GetContentTypeForBytes(System.Byte[])
  id: GetContentTypeForBytes(System.Byte[])
  parent: Imageflow.Fluent.ImageJob
  langs:
  - csharp
  - vb
  name: GetContentTypeForBytes(Byte[])
  nameWithType: ImageJob.GetContentTypeForBytes(Byte[])
  fullName: Imageflow.Fluent.ImageJob.GetContentTypeForBytes(System.Byte[])
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/ImageJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: GetContentTypeForBytes
    path: src/Imageflow/Fluent/ImageJob.cs
    startLine: 599
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nReturns a MIME type string such as &quot;image/jpeg&quot; based on the provided first 12 bytes of the file.\nOnly guaranteed to work for image types Imageflow supports, but support for more file types may be added\nlater. \n"
  example: []
  syntax:
    content: public static string GetContentTypeForBytes(byte[] first12Bytes)
    parameters:
    - id: first12Bytes
      type: System.Byte[]
      description: The first 12 or more bytes of the file
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function GetContentTypeForBytes(first12Bytes As Byte()) As String
  overload: Imageflow.Fluent.ImageJob.GetContentTypeForBytes*
  nameWithType.vb: ImageJob.GetContentTypeForBytes(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Imageflow.Fluent.ImageJob.GetContentTypeForBytes(System.Byte())
  name.vb: GetContentTypeForBytes(Byte())
references:
- uid: Imageflow.Fluent
  commentId: N:Imageflow.Fluent
  name: Imageflow.Fluent
  nameWithType: Imageflow.Fluent
  fullName: Imageflow.Fluent
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Imageflow.Fluent.ImageJob.Decode*
  commentId: Overload:Imageflow.Fluent.ImageJob.Decode
  name: Decode
  nameWithType: ImageJob.Decode
  fullName: Imageflow.Fluent.ImageJob.Decode
- uid: Imageflow.Fluent.IBytesSource
  commentId: T:Imageflow.Fluent.IBytesSource
  parent: Imageflow.Fluent
  name: IBytesSource
  nameWithType: IBytesSource
  fullName: Imageflow.Fluent.IBytesSource
- uid: Imageflow.Fluent.DecodeCommands
  commentId: T:Imageflow.Fluent.DecodeCommands
  parent: Imageflow.Fluent
  name: DecodeCommands
  nameWithType: DecodeCommands
  fullName: Imageflow.Fluent.DecodeCommands
- uid: Imageflow.Fluent.BuildNode
  commentId: T:Imageflow.Fluent.BuildNode
  parent: Imageflow.Fluent
  name: BuildNode
  nameWithType: BuildNode
  fullName: Imageflow.Fluent.BuildNode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ArraySegment{System.Byte}
  commentId: T:System.ArraySegment{System.Byte}
  parent: System
  definition: System.ArraySegment`1
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  nameWithType.vb: ArraySegment(Of Byte)
  fullName.vb: System.ArraySegment(Of System.Byte)
  name.vb: ArraySegment(Of Byte)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArraySegment`1
  commentId: T:System.ArraySegment`1
  isExternal: true
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>
  fullName: System.ArraySegment<T>
  nameWithType.vb: ArraySegment(Of T)
  fullName.vb: System.ArraySegment(Of T)
  name.vb: ArraySegment(Of T)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Imageflow.Fluent.ImageJob.CreateCanvasBgra32*
  commentId: Overload:Imageflow.Fluent.ImageJob.CreateCanvasBgra32
  name: CreateCanvasBgra32
  nameWithType: ImageJob.CreateCanvasBgra32
  fullName: Imageflow.Fluent.ImageJob.CreateCanvasBgra32
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Imageflow.Fluent.AnyColor
  commentId: T:Imageflow.Fluent.AnyColor
  parent: Imageflow.Fluent
  name: AnyColor
  nameWithType: AnyColor
  fullName: Imageflow.Fluent.AnyColor
- uid: Imageflow.Fluent.ImageJob.CreateCanvasBgr32*
  commentId: Overload:Imageflow.Fluent.ImageJob.CreateCanvasBgr32
  name: CreateCanvasBgr32
  nameWithType: ImageJob.CreateCanvasBgr32
  fullName: Imageflow.Fluent.ImageJob.CreateCanvasBgr32
- uid: Imageflow.Fluent.ImageJob.BuildCommandString*
  commentId: Overload:Imageflow.Fluent.ImageJob.BuildCommandString
  name: BuildCommandString
  nameWithType: ImageJob.BuildCommandString
  fullName: Imageflow.Fluent.ImageJob.BuildCommandString
- uid: Imageflow.Fluent.IOutputDestination
  commentId: T:Imageflow.Fluent.IOutputDestination
  parent: Imageflow.Fluent
  name: IOutputDestination
  nameWithType: IOutputDestination
  fullName: Imageflow.Fluent.IOutputDestination
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Imageflow.Fluent.BuildEndpoint
  commentId: T:Imageflow.Fluent.BuildEndpoint
  parent: Imageflow.Fluent
  name: BuildEndpoint
  nameWithType: BuildEndpoint
  fullName: Imageflow.Fluent.BuildEndpoint
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Imageflow.Fluent.InputWatermark}
  commentId: T:System.Collections.Generic.ICollection{Imageflow.Fluent.InputWatermark}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<InputWatermark>
  nameWithType: ICollection<InputWatermark>
  fullName: System.Collections.Generic.ICollection<Imageflow.Fluent.InputWatermark>
  nameWithType.vb: ICollection(Of InputWatermark)
  fullName.vb: System.Collections.Generic.ICollection(Of Imageflow.Fluent.InputWatermark)
  name.vb: ICollection(Of InputWatermark)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Imageflow.Fluent.InputWatermark
    name: InputWatermark
    nameWithType: InputWatermark
    fullName: Imageflow.Fluent.InputWatermark
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Imageflow.Fluent.InputWatermark
    name: InputWatermark
    nameWithType: InputWatermark
    fullName: Imageflow.Fluent.InputWatermark
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Imageflow.Fluent.ImageJob.Finish*
  commentId: Overload:Imageflow.Fluent.ImageJob.Finish
  name: Finish
  nameWithType: ImageJob.Finish
  fullName: Imageflow.Fluent.ImageJob.Finish
- uid: Imageflow.Fluent.FinishJobBuilder
  commentId: T:Imageflow.Fluent.FinishJobBuilder
  parent: Imageflow.Fluent
  name: FinishJobBuilder
  nameWithType: FinishJobBuilder
  fullName: Imageflow.Fluent.FinishJobBuilder
- uid: Imageflow.Fluent.ImageJob.FinishAsync*
  commentId: Overload:Imageflow.Fluent.ImageJob.FinishAsync
  name: FinishAsync
  nameWithType: ImageJob.FinishAsync
  fullName: Imageflow.Fluent.ImageJob.FinishAsync
- uid: System.Threading.Tasks.Task{Imageflow.Fluent.BuildJobResult}
  commentId: T:System.Threading.Tasks.Task{Imageflow.Fluent.BuildJobResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<BuildJobResult>
  nameWithType: Task<BuildJobResult>
  fullName: System.Threading.Tasks.Task<Imageflow.Fluent.BuildJobResult>
  nameWithType.vb: Task(Of BuildJobResult)
  fullName.vb: System.Threading.Tasks.Task(Of Imageflow.Fluent.BuildJobResult)
  name.vb: Task(Of BuildJobResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Imageflow.Fluent.BuildJobResult
    name: BuildJobResult
    nameWithType: BuildJobResult
    fullName: Imageflow.Fluent.BuildJobResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Imageflow.Fluent.BuildJobResult
    name: BuildJobResult
    nameWithType: BuildJobResult
    fullName: Imageflow.Fluent.BuildJobResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Imageflow.Fluent.ImageJob.FinishInSubprocessAsync*
  commentId: Overload:Imageflow.Fluent.ImageJob.FinishInSubprocessAsync
  name: FinishInSubprocessAsync
  nameWithType: ImageJob.FinishInSubprocessAsync
  fullName: Imageflow.Fluent.ImageJob.FinishInSubprocessAsync
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Imageflow.Fluent.ImageJob.WriteJsonJobAndInputs*
  commentId: Overload:Imageflow.Fluent.ImageJob.WriteJsonJobAndInputs
  name: WriteJsonJobAndInputs
  nameWithType: ImageJob.WriteJsonJobAndInputs
  fullName: Imageflow.Fluent.ImageJob.WriteJsonJobAndInputs
- uid: System.Threading.Tasks.Task{Imageflow.Fluent.IPreparedFilesystemJob}
  commentId: T:System.Threading.Tasks.Task{Imageflow.Fluent.IPreparedFilesystemJob}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IPreparedFilesystemJob>
  nameWithType: Task<IPreparedFilesystemJob>
  fullName: System.Threading.Tasks.Task<Imageflow.Fluent.IPreparedFilesystemJob>
  nameWithType.vb: Task(Of IPreparedFilesystemJob)
  fullName.vb: System.Threading.Tasks.Task(Of Imageflow.Fluent.IPreparedFilesystemJob)
  name.vb: Task(Of IPreparedFilesystemJob)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Imageflow.Fluent.IPreparedFilesystemJob
    name: IPreparedFilesystemJob
    nameWithType: IPreparedFilesystemJob
    fullName: Imageflow.Fluent.IPreparedFilesystemJob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Imageflow.Fluent.IPreparedFilesystemJob
    name: IPreparedFilesystemJob
    nameWithType: IPreparedFilesystemJob
    fullName: Imageflow.Fluent.IPreparedFilesystemJob
  - name: )
    nameWithType: )
    fullName: )
- uid: Imageflow.Fluent.ImageJob.FinishAndDisposeAsync*
  commentId: Overload:Imageflow.Fluent.ImageJob.FinishAndDisposeAsync
  name: FinishAndDisposeAsync
  nameWithType: ImageJob.FinishAndDisposeAsync
  fullName: Imageflow.Fluent.ImageJob.FinishAndDisposeAsync
- uid: Imageflow.Fluent.ImageJob.Dispose*
  commentId: Overload:Imageflow.Fluent.ImageJob.Dispose
  name: Dispose
  nameWithType: ImageJob.Dispose
  fullName: Imageflow.Fluent.ImageJob.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Imageflow.Fluent.ImageJob.GenerateIoId*
  commentId: Overload:Imageflow.Fluent.ImageJob.GenerateIoId
  name: GenerateIoId
  nameWithType: ImageJob.GenerateIoId
  fullName: Imageflow.Fluent.ImageJob.GenerateIoId
- uid: Imageflow.Fluent.ImageJob.GetImageInfo*
  commentId: Overload:Imageflow.Fluent.ImageJob.GetImageInfo
  name: GetImageInfo
  nameWithType: ImageJob.GetImageInfo
  fullName: Imageflow.Fluent.ImageJob.GetImageInfo
- uid: System.Threading.Tasks.Task{Imageflow.Bindings.ImageInfo}
  commentId: T:System.Threading.Tasks.Task{Imageflow.Bindings.ImageInfo}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ImageInfo>
  nameWithType: Task<ImageInfo>
  fullName: System.Threading.Tasks.Task<Imageflow.Bindings.ImageInfo>
  nameWithType.vb: Task(Of ImageInfo)
  fullName.vb: System.Threading.Tasks.Task(Of Imageflow.Bindings.ImageInfo)
  name.vb: Task(Of ImageInfo)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Imageflow.Bindings.ImageInfo
    name: ImageInfo
    nameWithType: ImageInfo
    fullName: Imageflow.Bindings.ImageInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Imageflow.Bindings.ImageInfo
    name: ImageInfo
    nameWithType: ImageInfo
    fullName: Imageflow.Bindings.ImageInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: Imageflow.Fluent.ImageJob.CanDecodeBytes*
  commentId: Overload:Imageflow.Fluent.ImageJob.CanDecodeBytes
  name: CanDecodeBytes
  nameWithType: ImageJob.CanDecodeBytes
  fullName: Imageflow.Fluent.ImageJob.CanDecodeBytes
- uid: Imageflow.Fluent.ImageJob.GetContentTypeForBytes*
  commentId: Overload:Imageflow.Fluent.ImageJob.GetContentTypeForBytes
  name: GetContentTypeForBytes
  nameWithType: ImageJob.GetContentTypeForBytes
  fullName: Imageflow.Fluent.ImageJob.GetContentTypeForBytes
