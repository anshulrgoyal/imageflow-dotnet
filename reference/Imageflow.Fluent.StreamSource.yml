### YamlMime:ManagedReference
items:
- uid: Imageflow.Fluent.StreamSource
  commentId: T:Imageflow.Fluent.StreamSource
  id: StreamSource
  parent: Imageflow.Fluent
  children:
  - Imageflow.Fluent.StreamSource.#ctor(System.IO.Stream,System.Boolean)
  - Imageflow.Fluent.StreamSource.Dispose
  - Imageflow.Fluent.StreamSource.GetBytesAsync(System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: StreamSource
  nameWithType: StreamSource
  fullName: Imageflow.Fluent.StreamSource
  type: Class
  source:
    remote:
      path: src/Imageflow/Fluent/IBytesSource.cs
      branch: af211ba6636e5cd2df38be17a4ebc839e3f3b486
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: StreamSource
    path: src/Imageflow/Fluent/IBytesSource.cs
    startLine: 46
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nRepresents a image source that is backed by a Stream. \n"
  example: []
  syntax:
    content: 'public class StreamSource : IBytesSource, IDisposable'
    content.vb: >-
      Public Class StreamSource
          Implements IBytesSource, IDisposable
  inheritance:
  - System.Object
  implements:
  - Imageflow.Fluent.IBytesSource
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Imageflow.Fluent.StreamSource.#ctor(System.IO.Stream,System.Boolean)
  commentId: M:Imageflow.Fluent.StreamSource.#ctor(System.IO.Stream,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Boolean)'
  parent: Imageflow.Fluent.StreamSource
  langs:
  - csharp
  - vb
  name: StreamSource(Stream, Boolean)
  nameWithType: StreamSource.StreamSource(Stream, Boolean)
  fullName: Imageflow.Fluent.StreamSource.StreamSource(System.IO.Stream, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/Imageflow/Fluent/IBytesSource.cs
      branch: af211ba6636e5cd2df38be17a4ebc839e3f3b486
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: .ctor
    path: src/Imageflow/Fluent/IBytesSource.cs
    startLine: 49
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public StreamSource(Stream underlying, bool disposeUnderlying)
    parameters:
    - id: underlying
      type: System.IO.Stream
    - id: disposeUnderlying
      type: System.Boolean
    content.vb: Public Sub New(underlying As Stream, disposeUnderlying As Boolean)
  overload: Imageflow.Fluent.StreamSource.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.StreamSource.Dispose
  commentId: M:Imageflow.Fluent.StreamSource.Dispose
  id: Dispose
  parent: Imageflow.Fluent.StreamSource
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: StreamSource.Dispose()
  fullName: Imageflow.Fluent.StreamSource.Dispose()
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/IBytesSource.cs
      branch: af211ba6636e5cd2df38be17a4ebc839e3f3b486
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Dispose
    path: src/Imageflow/Fluent/IBytesSource.cs
    startLine: 57
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Imageflow.Fluent.StreamSource.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.StreamSource.GetBytesAsync(System.Threading.CancellationToken)
  commentId: M:Imageflow.Fluent.StreamSource.GetBytesAsync(System.Threading.CancellationToken)
  id: GetBytesAsync(System.Threading.CancellationToken)
  parent: Imageflow.Fluent.StreamSource
  langs:
  - csharp
  - vb
  name: GetBytesAsync(CancellationToken)
  nameWithType: StreamSource.GetBytesAsync(CancellationToken)
  fullName: Imageflow.Fluent.StreamSource.GetBytesAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/IBytesSource.cs
      branch: af211ba6636e5cd2df38be17a4ebc839e3f3b486
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: GetBytesAsync
    path: src/Imageflow/Fluent/IBytesSource.cs
    startLine: 66
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public Task<ArraySegment<byte>> GetBytesAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.ArraySegment{System.Byte}}
    content.vb: Public Function GetBytesAsync(cancellationToken As CancellationToken) As Task(Of ArraySegment(Of Byte))
  overload: Imageflow.Fluent.StreamSource.GetBytesAsync*
  implements:
  - Imageflow.Fluent.IBytesSource.GetBytesAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Imageflow.Fluent
  commentId: N:Imageflow.Fluent
  name: Imageflow.Fluent
  nameWithType: Imageflow.Fluent
  fullName: Imageflow.Fluent
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Imageflow.Fluent.IBytesSource
  commentId: T:Imageflow.Fluent.IBytesSource
  parent: Imageflow.Fluent
  name: IBytesSource
  nameWithType: IBytesSource
  fullName: Imageflow.Fluent.IBytesSource
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Imageflow.Fluent.StreamSource.#ctor*
  commentId: Overload:Imageflow.Fluent.StreamSource.#ctor
  name: StreamSource
  nameWithType: StreamSource.StreamSource
  fullName: Imageflow.Fluent.StreamSource.StreamSource
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Imageflow.Fluent.StreamSource.Dispose*
  commentId: Overload:Imageflow.Fluent.StreamSource.Dispose
  name: Dispose
  nameWithType: StreamSource.Dispose
  fullName: Imageflow.Fluent.StreamSource.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Imageflow.Fluent.StreamSource.GetBytesAsync*
  commentId: Overload:Imageflow.Fluent.StreamSource.GetBytesAsync
  name: GetBytesAsync
  nameWithType: StreamSource.GetBytesAsync
  fullName: Imageflow.Fluent.StreamSource.GetBytesAsync
- uid: Imageflow.Fluent.IBytesSource.GetBytesAsync(System.Threading.CancellationToken)
  commentId: M:Imageflow.Fluent.IBytesSource.GetBytesAsync(System.Threading.CancellationToken)
  parent: Imageflow.Fluent.IBytesSource
  isExternal: true
  name: GetBytesAsync(CancellationToken)
  nameWithType: IBytesSource.GetBytesAsync(CancellationToken)
  fullName: Imageflow.Fluent.IBytesSource.GetBytesAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Imageflow.Fluent.IBytesSource.GetBytesAsync(System.Threading.CancellationToken)
    name: GetBytesAsync
    nameWithType: IBytesSource.GetBytesAsync
    fullName: Imageflow.Fluent.IBytesSource.GetBytesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Imageflow.Fluent.IBytesSource.GetBytesAsync(System.Threading.CancellationToken)
    name: GetBytesAsync
    nameWithType: IBytesSource.GetBytesAsync
    fullName: Imageflow.Fluent.IBytesSource.GetBytesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.ArraySegment{System.Byte}}
  commentId: T:System.Threading.Tasks.Task{System.ArraySegment{System.Byte}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ArraySegment<Byte>>
  nameWithType: Task<ArraySegment<Byte>>
  fullName: System.Threading.Tasks.Task<System.ArraySegment<System.Byte>>
  nameWithType.vb: Task(Of ArraySegment(Of Byte))
  fullName.vb: System.Threading.Tasks.Task(Of System.ArraySegment(Of System.Byte))
  name.vb: Task(Of ArraySegment(Of Byte))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
