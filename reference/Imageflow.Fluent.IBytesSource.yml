### YamlMime:ManagedReference
items:
- uid: Imageflow.Fluent.IBytesSource
  commentId: T:Imageflow.Fluent.IBytesSource
  id: IBytesSource
  parent: Imageflow.Fluent
  children:
  - Imageflow.Fluent.IBytesSource.GetBytesAsync(System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IBytesSource
  nameWithType: IBytesSource
  fullName: Imageflow.Fluent.IBytesSource
  type: Interface
  source:
    remote:
      path: src/Imageflow/Fluent/IBytesSource.cs
      branch: af211ba6636e5cd2df38be17a4ebc839e3f3b486
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: IBytesSource
    path: src/Imageflow/Fluent/IBytesSource.cs
    startLine: 8
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: 'public interface IBytesSource : IDisposable'
    content.vb: >-
      Public Interface IBytesSource
          Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Imageflow.Fluent.IBytesSource.GetBytesAsync(System.Threading.CancellationToken)
  commentId: M:Imageflow.Fluent.IBytesSource.GetBytesAsync(System.Threading.CancellationToken)
  id: GetBytesAsync(System.Threading.CancellationToken)
  parent: Imageflow.Fluent.IBytesSource
  langs:
  - csharp
  - vb
  name: GetBytesAsync(CancellationToken)
  nameWithType: IBytesSource.GetBytesAsync(CancellationToken)
  fullName: Imageflow.Fluent.IBytesSource.GetBytesAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/IBytesSource.cs
      branch: af211ba6636e5cd2df38be17a4ebc839e3f3b486
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: GetBytesAsync
    path: src/Imageflow/Fluent/IBytesSource.cs
    startLine: 14
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nReturn a reference to a byte array that (until the implementor is disposed) will (a) remain immutable, and (b) can be GC pinned.\n"
  example: []
  syntax:
    content: Task<ArraySegment<byte>> GetBytesAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.ArraySegment{System.Byte}}
      description: ''
    content.vb: Function GetBytesAsync(cancellationToken As CancellationToken) As Task(Of ArraySegment(Of Byte))
  overload: Imageflow.Fluent.IBytesSource.GetBytesAsync*
references:
- uid: Imageflow.Fluent
  commentId: N:Imageflow.Fluent
  name: Imageflow.Fluent
  nameWithType: Imageflow.Fluent
  fullName: Imageflow.Fluent
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Imageflow.Fluent.IBytesSource.GetBytesAsync*
  commentId: Overload:Imageflow.Fluent.IBytesSource.GetBytesAsync
  name: GetBytesAsync
  nameWithType: IBytesSource.GetBytesAsync
  fullName: Imageflow.Fluent.IBytesSource.GetBytesAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.ArraySegment{System.Byte}}
  commentId: T:System.Threading.Tasks.Task{System.ArraySegment{System.Byte}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ArraySegment<Byte>>
  nameWithType: Task<ArraySegment<Byte>>
  fullName: System.Threading.Tasks.Task<System.ArraySegment<System.Byte>>
  nameWithType.vb: Task(Of ArraySegment(Of Byte))
  fullName.vb: System.Threading.Tasks.Task(Of System.ArraySegment(Of System.Byte))
  name.vb: Task(Of ArraySegment(Of Byte))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
