### YamlMime:ManagedReference
items:
- uid: Imageflow.Fluent.IPreparedFilesystemJob
  commentId: T:Imageflow.Fluent.IPreparedFilesystemJob
  id: IPreparedFilesystemJob
  parent: Imageflow.Fluent
  children:
  - Imageflow.Fluent.IPreparedFilesystemJob.JsonPath
  - Imageflow.Fluent.IPreparedFilesystemJob.OutputFiles
  langs:
  - csharp
  - vb
  name: IPreparedFilesystemJob
  nameWithType: IPreparedFilesystemJob
  fullName: Imageflow.Fluent.IPreparedFilesystemJob
  type: Interface
  source:
    remote:
      path: src/Imageflow/Fluent/IPreparedFilesystemJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: IPreparedFilesystemJob
    path: src/Imageflow/Fluent/IPreparedFilesystemJob.cs
    startLine: 5
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: 'public interface IPreparedFilesystemJob : IDisposable'
    content.vb: >-
      Public Interface IPreparedFilesystemJob
          Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Imageflow.Fluent.IPreparedFilesystemJob.JsonPath
  commentId: P:Imageflow.Fluent.IPreparedFilesystemJob.JsonPath
  id: JsonPath
  parent: Imageflow.Fluent.IPreparedFilesystemJob
  langs:
  - csharp
  - vb
  name: JsonPath
  nameWithType: IPreparedFilesystemJob.JsonPath
  fullName: Imageflow.Fluent.IPreparedFilesystemJob.JsonPath
  type: Property
  source:
    remote:
      path: src/Imageflow/Fluent/IPreparedFilesystemJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: JsonPath
    path: src/Imageflow/Fluent/IPreparedFilesystemJob.cs
    startLine: 7
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: string JsonPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property JsonPath As String
  overload: Imageflow.Fluent.IPreparedFilesystemJob.JsonPath*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Imageflow.Fluent.IPreparedFilesystemJob.OutputFiles
  commentId: P:Imageflow.Fluent.IPreparedFilesystemJob.OutputFiles
  id: OutputFiles
  parent: Imageflow.Fluent.IPreparedFilesystemJob
  langs:
  - csharp
  - vb
  name: OutputFiles
  nameWithType: IPreparedFilesystemJob.OutputFiles
  fullName: Imageflow.Fluent.IPreparedFilesystemJob.OutputFiles
  type: Property
  source:
    remote:
      path: src/Imageflow/Fluent/IPreparedFilesystemJob.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: OutputFiles
    path: src/Imageflow/Fluent/IPreparedFilesystemJob.cs
    startLine: 8
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: IReadOnlyDictionary<int, string> OutputFiles { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.String}
    content.vb: ReadOnly Property OutputFiles As IReadOnlyDictionary(Of Integer, String)
  overload: Imageflow.Fluent.IPreparedFilesystemJob.OutputFiles*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Imageflow.Fluent
  commentId: N:Imageflow.Fluent
  name: Imageflow.Fluent
  nameWithType: Imageflow.Fluent
  fullName: Imageflow.Fluent
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Imageflow.Fluent.IPreparedFilesystemJob.JsonPath*
  commentId: Overload:Imageflow.Fluent.IPreparedFilesystemJob.JsonPath
  name: JsonPath
  nameWithType: IPreparedFilesystemJob.JsonPath
  fullName: Imageflow.Fluent.IPreparedFilesystemJob.JsonPath
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Imageflow.Fluent.IPreparedFilesystemJob.OutputFiles*
  commentId: Overload:Imageflow.Fluent.IPreparedFilesystemJob.OutputFiles
  name: OutputFiles
  nameWithType: IPreparedFilesystemJob.OutputFiles
  fullName: Imageflow.Fluent.IPreparedFilesystemJob.OutputFiles
- uid: System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.String}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<Int32, String>
  nameWithType: IReadOnlyDictionary<Int32, String>
  fullName: System.Collections.Generic.IReadOnlyDictionary<System.Int32, System.String>
  nameWithType.vb: IReadOnlyDictionary(Of Int32, String)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of System.Int32, System.String)
  name.vb: IReadOnlyDictionary(Of Int32, String)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
