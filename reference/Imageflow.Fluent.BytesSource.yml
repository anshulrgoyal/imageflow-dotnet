### YamlMime:ManagedReference
items:
- uid: Imageflow.Fluent.BytesSource
  commentId: T:Imageflow.Fluent.BytesSource
  id: BytesSource
  parent: Imageflow.Fluent
  children:
  - Imageflow.Fluent.BytesSource.#ctor(System.ArraySegment{System.Byte})
  - Imageflow.Fluent.BytesSource.#ctor(System.Byte[])
  - Imageflow.Fluent.BytesSource.#ctor(System.Byte[],System.Int32,System.Int32)
  - Imageflow.Fluent.BytesSource.Dispose
  - Imageflow.Fluent.BytesSource.GetBytesAsync(System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: BytesSource
  nameWithType: BytesSource
  fullName: Imageflow.Fluent.BytesSource
  type: Struct
  source:
    remote:
      path: src/Imageflow/Fluent/IBytesSource.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: BytesSource
    path: src/Imageflow/Fluent/IBytesSource.cs
    startLine: 20
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nRepresents a source backed by an ArraySegment or byte[] array.\n"
  example: []
  syntax:
    content: 'public struct BytesSource : IBytesSource, IDisposable'
    content.vb: >-
      Public Structure BytesSource
          Implements IBytesSource, IDisposable
  implements:
  - Imageflow.Fluent.IBytesSource
  - System.IDisposable
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Imageflow.Fluent.BytesSource.#ctor(System.Byte[])
  commentId: M:Imageflow.Fluent.BytesSource.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: Imageflow.Fluent.BytesSource
  langs:
  - csharp
  - vb
  name: BytesSource(Byte[])
  nameWithType: BytesSource.BytesSource(Byte[])
  fullName: Imageflow.Fluent.BytesSource.BytesSource(System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/Imageflow/Fluent/IBytesSource.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: .ctor
    path: src/Imageflow/Fluent/IBytesSource.cs
    startLine: 22
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public BytesSource(byte[] bytes)
    parameters:
    - id: bytes
      type: System.Byte[]
    content.vb: Public Sub New(bytes As Byte())
  overload: Imageflow.Fluent.BytesSource.#ctor*
  nameWithType.vb: BytesSource.BytesSource(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Imageflow.Fluent.BytesSource.BytesSource(System.Byte())
  name.vb: BytesSource(Byte())
- uid: Imageflow.Fluent.BytesSource.#ctor(System.Byte[],System.Int32,System.Int32)
  commentId: M:Imageflow.Fluent.BytesSource.#ctor(System.Byte[],System.Int32,System.Int32)
  id: '#ctor(System.Byte[],System.Int32,System.Int32)'
  parent: Imageflow.Fluent.BytesSource
  langs:
  - csharp
  - vb
  name: BytesSource(Byte[], Int32, Int32)
  nameWithType: BytesSource.BytesSource(Byte[], Int32, Int32)
  fullName: Imageflow.Fluent.BytesSource.BytesSource(System.Byte[], System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Imageflow/Fluent/IBytesSource.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: .ctor
    path: src/Imageflow/Fluent/IBytesSource.cs
    startLine: 26
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public BytesSource(byte[] bytes, int offset, int length)
    parameters:
    - id: bytes
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: length
      type: System.Int32
    content.vb: Public Sub New(bytes As Byte(), offset As Integer, length As Integer)
  overload: Imageflow.Fluent.BytesSource.#ctor*
  nameWithType.vb: BytesSource.BytesSource(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Imageflow.Fluent.BytesSource.BytesSource(System.Byte(), System.Int32, System.Int32)
  name.vb: BytesSource(Byte(), Int32, Int32)
- uid: Imageflow.Fluent.BytesSource.#ctor(System.ArraySegment{System.Byte})
  commentId: M:Imageflow.Fluent.BytesSource.#ctor(System.ArraySegment{System.Byte})
  id: '#ctor(System.ArraySegment{System.Byte})'
  parent: Imageflow.Fluent.BytesSource
  langs:
  - csharp
  - vb
  name: BytesSource(ArraySegment<Byte>)
  nameWithType: BytesSource.BytesSource(ArraySegment<Byte>)
  fullName: Imageflow.Fluent.BytesSource.BytesSource(System.ArraySegment<System.Byte>)
  type: Constructor
  source:
    remote:
      path: src/Imageflow/Fluent/IBytesSource.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: .ctor
    path: src/Imageflow/Fluent/IBytesSource.cs
    startLine: 30
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public BytesSource(ArraySegment<byte> bytes)
    parameters:
    - id: bytes
      type: System.ArraySegment{System.Byte}
    content.vb: Public Sub New(bytes As ArraySegment(Of Byte))
  overload: Imageflow.Fluent.BytesSource.#ctor*
  nameWithType.vb: BytesSource.BytesSource(ArraySegment(Of Byte))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Imageflow.Fluent.BytesSource.BytesSource(System.ArraySegment(Of System.Byte))
  name.vb: BytesSource(ArraySegment(Of Byte))
- uid: Imageflow.Fluent.BytesSource.Dispose
  commentId: M:Imageflow.Fluent.BytesSource.Dispose
  id: Dispose
  parent: Imageflow.Fluent.BytesSource
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: BytesSource.Dispose()
  fullName: Imageflow.Fluent.BytesSource.Dispose()
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/IBytesSource.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Dispose
    path: src/Imageflow/Fluent/IBytesSource.cs
    startLine: 37
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Imageflow.Fluent.BytesSource.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BytesSource.GetBytesAsync(System.Threading.CancellationToken)
  commentId: M:Imageflow.Fluent.BytesSource.GetBytesAsync(System.Threading.CancellationToken)
  id: GetBytesAsync(System.Threading.CancellationToken)
  parent: Imageflow.Fluent.BytesSource
  langs:
  - csharp
  - vb
  name: GetBytesAsync(CancellationToken)
  nameWithType: BytesSource.GetBytesAsync(CancellationToken)
  fullName: Imageflow.Fluent.BytesSource.GetBytesAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/IBytesSource.cs
      branch: 3a3a03881f960b7ded94c07adbe3ebdf25495d2a
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: GetBytesAsync
    path: src/Imageflow/Fluent/IBytesSource.cs
    startLine: 40
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public Task<ArraySegment<byte>> GetBytesAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.ArraySegment{System.Byte}}
    content.vb: Public Function GetBytesAsync(cancellationToken As CancellationToken) As Task(Of ArraySegment(Of Byte))
  overload: Imageflow.Fluent.BytesSource.GetBytesAsync*
  implements:
  - Imageflow.Fluent.IBytesSource.GetBytesAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Imageflow.Fluent
  commentId: N:Imageflow.Fluent
  name: Imageflow.Fluent
  nameWithType: Imageflow.Fluent
  fullName: Imageflow.Fluent
- uid: Imageflow.Fluent.IBytesSource
  commentId: T:Imageflow.Fluent.IBytesSource
  parent: Imageflow.Fluent
  name: IBytesSource
  nameWithType: IBytesSource
  fullName: Imageflow.Fluent.IBytesSource
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Imageflow.Fluent.BytesSource.#ctor*
  commentId: Overload:Imageflow.Fluent.BytesSource.#ctor
  name: BytesSource
  nameWithType: BytesSource.BytesSource
  fullName: Imageflow.Fluent.BytesSource.BytesSource
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ArraySegment{System.Byte}
  commentId: T:System.ArraySegment{System.Byte}
  parent: System
  definition: System.ArraySegment`1
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  nameWithType.vb: ArraySegment(Of Byte)
  fullName.vb: System.ArraySegment(Of System.Byte)
  name.vb: ArraySegment(Of Byte)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArraySegment`1
  commentId: T:System.ArraySegment`1
  isExternal: true
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>
  fullName: System.ArraySegment<T>
  nameWithType.vb: ArraySegment(Of T)
  fullName.vb: System.ArraySegment(Of T)
  name.vb: ArraySegment(Of T)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Imageflow.Fluent.BytesSource.Dispose*
  commentId: Overload:Imageflow.Fluent.BytesSource.Dispose
  name: Dispose
  nameWithType: BytesSource.Dispose
  fullName: Imageflow.Fluent.BytesSource.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Imageflow.Fluent.BytesSource.GetBytesAsync*
  commentId: Overload:Imageflow.Fluent.BytesSource.GetBytesAsync
  name: GetBytesAsync
  nameWithType: BytesSource.GetBytesAsync
  fullName: Imageflow.Fluent.BytesSource.GetBytesAsync
- uid: Imageflow.Fluent.IBytesSource.GetBytesAsync(System.Threading.CancellationToken)
  commentId: M:Imageflow.Fluent.IBytesSource.GetBytesAsync(System.Threading.CancellationToken)
  parent: Imageflow.Fluent.IBytesSource
  isExternal: true
  name: GetBytesAsync(CancellationToken)
  nameWithType: IBytesSource.GetBytesAsync(CancellationToken)
  fullName: Imageflow.Fluent.IBytesSource.GetBytesAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Imageflow.Fluent.IBytesSource.GetBytesAsync(System.Threading.CancellationToken)
    name: GetBytesAsync
    nameWithType: IBytesSource.GetBytesAsync
    fullName: Imageflow.Fluent.IBytesSource.GetBytesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Imageflow.Fluent.IBytesSource.GetBytesAsync(System.Threading.CancellationToken)
    name: GetBytesAsync
    nameWithType: IBytesSource.GetBytesAsync
    fullName: Imageflow.Fluent.IBytesSource.GetBytesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.ArraySegment{System.Byte}}
  commentId: T:System.Threading.Tasks.Task{System.ArraySegment{System.Byte}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ArraySegment<Byte>>
  nameWithType: Task<ArraySegment<Byte>>
  fullName: System.Threading.Tasks.Task<System.ArraySegment<System.Byte>>
  nameWithType.vb: Task(Of ArraySegment(Of Byte))
  fullName.vb: System.Threading.Tasks.Task(Of System.ArraySegment(Of System.Byte))
  name.vb: Task(Of ArraySegment(Of Byte))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
