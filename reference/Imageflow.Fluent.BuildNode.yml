### YamlMime:ManagedReference
items:
- uid: Imageflow.Fluent.BuildNode
  commentId: T:Imageflow.Fluent.BuildNode
  id: BuildNode
  parent: Imageflow.Fluent
  children:
  - Imageflow.Fluent.BuildNode.Branch(System.Func{Imageflow.Fluent.BuildNode,Imageflow.Fluent.BuildEndpoint})
  - Imageflow.Fluent.BuildNode.BrightnessSrgb(System.Single)
  - Imageflow.Fluent.BuildNode.ColorFilterSrgb(Imageflow.Fluent.ColorFilterSrgb)
  - Imageflow.Fluent.BuildNode.Constrain(Imageflow.Fluent.Constraint)
  - Imageflow.Fluent.BuildNode.ConstrainWithin(System.Nullable{System.UInt32},System.Nullable{System.UInt32})
  - Imageflow.Fluent.BuildNode.ConstrainWithin(System.Nullable{System.UInt32},System.Nullable{System.UInt32},Imageflow.Fluent.ResampleHints)
  - Imageflow.Fluent.BuildNode.ContrastSrgb(System.Single)
  - Imageflow.Fluent.BuildNode.CopyRectTo(Imageflow.Fluent.BuildNode,System.Drawing.Rectangle,System.Drawing.Point)
  - Imageflow.Fluent.BuildNode.Crop(System.Int32,System.Int32,System.Int32,System.Int32)
  - Imageflow.Fluent.BuildNode.CropWhitespace(System.Int32,System.Single)
  - Imageflow.Fluent.BuildNode.Distort(System.UInt32,System.UInt32)
  - Imageflow.Fluent.BuildNode.Distort(System.UInt32,System.UInt32,Imageflow.Fluent.ResampleHints)
  - Imageflow.Fluent.BuildNode.DrawImageExactTo(Imageflow.Fluent.BuildNode,System.Drawing.Rectangle,Imageflow.Fluent.ResampleHints,System.Nullable{Imageflow.Fluent.CompositingMode})
  - Imageflow.Fluent.BuildNode.Encode(Imageflow.Fluent.IOutputDestination,Imageflow.Fluent.IEncoderPreset)
  - Imageflow.Fluent.BuildNode.Encode(Imageflow.Fluent.IOutputDestination,System.Int32,Imageflow.Fluent.IEncoderPreset)
  - Imageflow.Fluent.BuildNode.EncodeToBytes(Imageflow.Fluent.IEncoderPreset)
  - Imageflow.Fluent.BuildNode.EncodeToBytes(System.Int32,Imageflow.Fluent.IEncoderPreset)
  - Imageflow.Fluent.BuildNode.EncodeToStream(System.IO.Stream,System.Boolean,Imageflow.Fluent.IEncoderPreset)
  - Imageflow.Fluent.BuildNode.EncodeToStream(System.IO.Stream,System.Boolean,System.Int32,Imageflow.Fluent.IEncoderPreset)
  - Imageflow.Fluent.BuildNode.ExpandCanvas(System.Int32,System.Int32,System.Int32,System.Int32,Imageflow.Fluent.AnyColor)
  - Imageflow.Fluent.BuildNode.FillRectangle(System.Int32,System.Int32,System.Int32,System.Int32,Imageflow.Fluent.AnyColor)
  - Imageflow.Fluent.BuildNode.FlipHorizontal
  - Imageflow.Fluent.BuildNode.FlipVertical
  - Imageflow.Fluent.BuildNode.Region(System.Int32,System.Int32,System.Int32,System.Int32,Imageflow.Fluent.AnyColor)
  - Imageflow.Fluent.BuildNode.RegionPercent(System.Single,System.Single,System.Single,System.Single,Imageflow.Fluent.AnyColor)
  - Imageflow.Fluent.BuildNode.ResizerCommands(System.String)
  - Imageflow.Fluent.BuildNode.Rotate180
  - Imageflow.Fluent.BuildNode.Rotate270
  - Imageflow.Fluent.BuildNode.Rotate90
  - Imageflow.Fluent.BuildNode.SaturationSrgb(System.Single)
  - Imageflow.Fluent.BuildNode.TransparencySrgb(System.Single)
  - Imageflow.Fluent.BuildNode.Transpose
  - Imageflow.Fluent.BuildNode.Watermark(Imageflow.Fluent.IBytesSource,Imageflow.Fluent.WatermarkOptions)
  - Imageflow.Fluent.BuildNode.Watermark(Imageflow.Fluent.IBytesSource,System.Nullable{System.Int32},Imageflow.Fluent.WatermarkOptions)
  - Imageflow.Fluent.BuildNode.WhiteBalanceSrgb(System.Int32)
  langs:
  - csharp
  - vb
  name: BuildNode
  nameWithType: BuildNode
  fullName: Imageflow.Fluent.BuildNode
  type: Class
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: BuildNode
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 6
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: 'public class BuildNode : BuildItemBase'
    content.vb: >-
      Public Class BuildNode
          Inherits BuildItemBase
  inheritance:
  - System.Object
  - Imageflow.Fluent.BuildItemBase
  inheritedMembers:
  - Imageflow.Fluent.BuildItemBase.Equals(System.Object)
  - Imageflow.Fluent.BuildItemBase.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Imageflow.Fluent.BuildNode.Encode(Imageflow.Fluent.IOutputDestination,System.Int32,Imageflow.Fluent.IEncoderPreset)
  commentId: M:Imageflow.Fluent.BuildNode.Encode(Imageflow.Fluent.IOutputDestination,System.Int32,Imageflow.Fluent.IEncoderPreset)
  id: Encode(Imageflow.Fluent.IOutputDestination,System.Int32,Imageflow.Fluent.IEncoderPreset)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: Encode(IOutputDestination, Int32, IEncoderPreset)
  nameWithType: BuildNode.Encode(IOutputDestination, Int32, IEncoderPreset)
  fullName: Imageflow.Fluent.BuildNode.Encode(Imageflow.Fluent.IOutputDestination, System.Int32, Imageflow.Fluent.IEncoderPreset)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Encode
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 17
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nEncode the result to the given destination (such as a BytesDestination or StreamDestination)\n"
  example: []
  syntax:
    content: public BuildEndpoint Encode(IOutputDestination destination, int ioId, IEncoderPreset encoderPreset)
    parameters:
    - id: destination
      type: Imageflow.Fluent.IOutputDestination
      description: Where to write the bytes
    - id: ioId
      type: System.Int32
      description: ''
    - id: encoderPreset
      type: Imageflow.Fluent.IEncoderPreset
      description: An encoder class, such as `new MozJpegEncoder()`
    return:
      type: Imageflow.Fluent.BuildEndpoint
      description: ''
    content.vb: Public Function Encode(destination As IOutputDestination, ioId As Integer, encoderPreset As IEncoderPreset) As BuildEndpoint
  overload: Imageflow.Fluent.BuildNode.Encode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.Encode(Imageflow.Fluent.IOutputDestination,Imageflow.Fluent.IEncoderPreset)
  commentId: M:Imageflow.Fluent.BuildNode.Encode(Imageflow.Fluent.IOutputDestination,Imageflow.Fluent.IEncoderPreset)
  id: Encode(Imageflow.Fluent.IOutputDestination,Imageflow.Fluent.IEncoderPreset)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: Encode(IOutputDestination, IEncoderPreset)
  nameWithType: BuildNode.Encode(IOutputDestination, IEncoderPreset)
  fullName: Imageflow.Fluent.BuildNode.Encode(Imageflow.Fluent.IOutputDestination, Imageflow.Fluent.IEncoderPreset)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Encode
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 29
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nEncode the result to the given destination (such as a BytesDestination or StreamDestination)\n"
  example: []
  syntax:
    content: public BuildEndpoint Encode(IOutputDestination destination, IEncoderPreset encoderPreset)
    parameters:
    - id: destination
      type: Imageflow.Fluent.IOutputDestination
      description: Where to write the bytes
    - id: encoderPreset
      type: Imageflow.Fluent.IEncoderPreset
      description: An encoder class, such as `new MozJpegEncoder()`
    return:
      type: Imageflow.Fluent.BuildEndpoint
      description: ''
    content.vb: Public Function Encode(destination As IOutputDestination, encoderPreset As IEncoderPreset) As BuildEndpoint
  overload: Imageflow.Fluent.BuildNode.Encode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.EncodeToBytes(System.Int32,Imageflow.Fluent.IEncoderPreset)
  commentId: M:Imageflow.Fluent.BuildNode.EncodeToBytes(System.Int32,Imageflow.Fluent.IEncoderPreset)
  id: EncodeToBytes(System.Int32,Imageflow.Fluent.IEncoderPreset)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: EncodeToBytes(Int32, IEncoderPreset)
  nameWithType: BuildNode.EncodeToBytes(Int32, IEncoderPreset)
  fullName: Imageflow.Fluent.BuildNode.EncodeToBytes(System.Int32, Imageflow.Fluent.IEncoderPreset)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: EncodeToBytes
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 32
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: >-
      [Obsolete("Use Encode(IOutputDestination destination, int ioId, IEncoderPreset encoderPreset)")]

      public BuildEndpoint EncodeToBytes(int ioId, IEncoderPreset encoderPreset)
    parameters:
    - id: ioId
      type: System.Int32
    - id: encoderPreset
      type: Imageflow.Fluent.IEncoderPreset
    return:
      type: Imageflow.Fluent.BuildEndpoint
    content.vb: >-
      <Obsolete("Use Encode(IOutputDestination destination, int ioId, IEncoderPreset encoderPreset)")>

      Public Function EncodeToBytes(ioId As Integer, encoderPreset As IEncoderPreset) As BuildEndpoint
  overload: Imageflow.Fluent.BuildNode.EncodeToBytes*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use Encode(IOutputDestination destination, int ioId, IEncoderPreset encoderPreset)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.EncodeToBytes(Imageflow.Fluent.IEncoderPreset)
  commentId: M:Imageflow.Fluent.BuildNode.EncodeToBytes(Imageflow.Fluent.IEncoderPreset)
  id: EncodeToBytes(Imageflow.Fluent.IEncoderPreset)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: EncodeToBytes(IEncoderPreset)
  nameWithType: BuildNode.EncodeToBytes(IEncoderPreset)
  fullName: Imageflow.Fluent.BuildNode.EncodeToBytes(Imageflow.Fluent.IEncoderPreset)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: EncodeToBytes
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 35
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public BuildEndpoint EncodeToBytes(IEncoderPreset encoderPreset)
    parameters:
    - id: encoderPreset
      type: Imageflow.Fluent.IEncoderPreset
    return:
      type: Imageflow.Fluent.BuildEndpoint
    content.vb: Public Function EncodeToBytes(encoderPreset As IEncoderPreset) As BuildEndpoint
  overload: Imageflow.Fluent.BuildNode.EncodeToBytes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.EncodeToStream(System.IO.Stream,System.Boolean,System.Int32,Imageflow.Fluent.IEncoderPreset)
  commentId: M:Imageflow.Fluent.BuildNode.EncodeToStream(System.IO.Stream,System.Boolean,System.Int32,Imageflow.Fluent.IEncoderPreset)
  id: EncodeToStream(System.IO.Stream,System.Boolean,System.Int32,Imageflow.Fluent.IEncoderPreset)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: EncodeToStream(Stream, Boolean, Int32, IEncoderPreset)
  nameWithType: BuildNode.EncodeToStream(Stream, Boolean, Int32, IEncoderPreset)
  fullName: Imageflow.Fluent.BuildNode.EncodeToStream(System.IO.Stream, System.Boolean, System.Int32, Imageflow.Fluent.IEncoderPreset)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: EncodeToStream
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 38
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: >-
      [Obsolete("Use Encode(IOutputDestination destination, int ioId, IEncoderPreset encoderPreset)")]

      public BuildEndpoint EncodeToStream(Stream stream, bool disposeStream, int ioId, IEncoderPreset encoderPreset)
    parameters:
    - id: stream
      type: System.IO.Stream
    - id: disposeStream
      type: System.Boolean
    - id: ioId
      type: System.Int32
    - id: encoderPreset
      type: Imageflow.Fluent.IEncoderPreset
    return:
      type: Imageflow.Fluent.BuildEndpoint
    content.vb: >-
      <Obsolete("Use Encode(IOutputDestination destination, int ioId, IEncoderPreset encoderPreset)")>

      Public Function EncodeToStream(stream As Stream, disposeStream As Boolean, ioId As Integer, encoderPreset As IEncoderPreset) As BuildEndpoint
  overload: Imageflow.Fluent.BuildNode.EncodeToStream*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use Encode(IOutputDestination destination, int ioId, IEncoderPreset encoderPreset)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.EncodeToStream(System.IO.Stream,System.Boolean,Imageflow.Fluent.IEncoderPreset)
  commentId: M:Imageflow.Fluent.BuildNode.EncodeToStream(System.IO.Stream,System.Boolean,Imageflow.Fluent.IEncoderPreset)
  id: EncodeToStream(System.IO.Stream,System.Boolean,Imageflow.Fluent.IEncoderPreset)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: EncodeToStream(Stream, Boolean, IEncoderPreset)
  nameWithType: BuildNode.EncodeToStream(Stream, Boolean, IEncoderPreset)
  fullName: Imageflow.Fluent.BuildNode.EncodeToStream(System.IO.Stream, System.Boolean, Imageflow.Fluent.IEncoderPreset)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: EncodeToStream
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 41
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  syntax:
    content: public BuildEndpoint EncodeToStream(Stream stream, bool disposeStream, IEncoderPreset encoderPreset)
    parameters:
    - id: stream
      type: System.IO.Stream
    - id: disposeStream
      type: System.Boolean
    - id: encoderPreset
      type: Imageflow.Fluent.IEncoderPreset
    return:
      type: Imageflow.Fluent.BuildEndpoint
    content.vb: Public Function EncodeToStream(stream As Stream, disposeStream As Boolean, encoderPreset As IEncoderPreset) As BuildEndpoint
  overload: Imageflow.Fluent.BuildNode.EncodeToStream*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.ConstrainWithin(System.Nullable{System.UInt32},System.Nullable{System.UInt32})
  commentId: M:Imageflow.Fluent.BuildNode.ConstrainWithin(System.Nullable{System.UInt32},System.Nullable{System.UInt32})
  id: ConstrainWithin(System.Nullable{System.UInt32},System.Nullable{System.UInt32})
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: ConstrainWithin(Nullable<UInt32>, Nullable<UInt32>)
  nameWithType: BuildNode.ConstrainWithin(Nullable<UInt32>, Nullable<UInt32>)
  fullName: Imageflow.Fluent.BuildNode.ConstrainWithin(System.Nullable<System.UInt32>, System.Nullable<System.UInt32>)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: ConstrainWithin
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 58
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nDownscale the image to fit within the given dimensions, but do not upscale. See Constrain() for more options.\n"
  example: []
  syntax:
    content: public BuildNode ConstrainWithin(uint? w, uint? h)
    parameters:
    - id: w
      type: System.Nullable{System.UInt32}
      description: ''
    - id: h
      type: System.Nullable{System.UInt32}
      description: ''
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function ConstrainWithin(w As UInteger?, h As UInteger?) As BuildNode
  overload: Imageflow.Fluent.BuildNode.ConstrainWithin*
  nameWithType.vb: BuildNode.ConstrainWithin(Nullable(Of UInt32), Nullable(Of UInt32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Imageflow.Fluent.BuildNode.ConstrainWithin(System.Nullable(Of System.UInt32), System.Nullable(Of System.UInt32))
  name.vb: ConstrainWithin(Nullable(Of UInt32), Nullable(Of UInt32))
- uid: Imageflow.Fluent.BuildNode.ConstrainWithin(System.Nullable{System.UInt32},System.Nullable{System.UInt32},Imageflow.Fluent.ResampleHints)
  commentId: M:Imageflow.Fluent.BuildNode.ConstrainWithin(System.Nullable{System.UInt32},System.Nullable{System.UInt32},Imageflow.Fluent.ResampleHints)
  id: ConstrainWithin(System.Nullable{System.UInt32},System.Nullable{System.UInt32},Imageflow.Fluent.ResampleHints)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: ConstrainWithin(Nullable<UInt32>, Nullable<UInt32>, ResampleHints)
  nameWithType: BuildNode.ConstrainWithin(Nullable<UInt32>, Nullable<UInt32>, ResampleHints)
  fullName: Imageflow.Fluent.BuildNode.ConstrainWithin(System.Nullable<System.UInt32>, System.Nullable<System.UInt32>, Imageflow.Fluent.ResampleHints)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: ConstrainWithin
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 67
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nDownscale the image to fit within the given dimensions, but do not upscale. See Constrain() for more options.\n"
  example: []
  syntax:
    content: public BuildNode ConstrainWithin(uint? w, uint? h, ResampleHints hints)
    parameters:
    - id: w
      type: System.Nullable{System.UInt32}
      description: ''
    - id: h
      type: System.Nullable{System.UInt32}
      description: ''
    - id: hints
      type: Imageflow.Fluent.ResampleHints
      description: ''
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function ConstrainWithin(w As UInteger?, h As UInteger?, hints As ResampleHints) As BuildNode
  overload: Imageflow.Fluent.BuildNode.ConstrainWithin*
  nameWithType.vb: BuildNode.ConstrainWithin(Nullable(Of UInt32), Nullable(Of UInt32), ResampleHints)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Imageflow.Fluent.BuildNode.ConstrainWithin(System.Nullable(Of System.UInt32), System.Nullable(Of System.UInt32), Imageflow.Fluent.ResampleHints)
  name.vb: ConstrainWithin(Nullable(Of UInt32), Nullable(Of UInt32), ResampleHints)
- uid: Imageflow.Fluent.BuildNode.Constrain(Imageflow.Fluent.Constraint)
  commentId: M:Imageflow.Fluent.BuildNode.Constrain(Imageflow.Fluent.Constraint)
  id: Constrain(Imageflow.Fluent.Constraint)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: Constrain(Constraint)
  nameWithType: BuildNode.Constrain(Constraint)
  fullName: Imageflow.Fluent.BuildNode.Constrain(Imageflow.Fluent.Constraint)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Constrain
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 85
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nScale an image using the given Constraint object. \n"
  example: []
  syntax:
    content: public BuildNode Constrain(Constraint constraint)
    parameters:
    - id: constraint
      type: Imageflow.Fluent.Constraint
      description: ''
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function Constrain(constraint As Constraint) As BuildNode
  overload: Imageflow.Fluent.BuildNode.Constrain*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.Distort(System.UInt32,System.UInt32)
  commentId: M:Imageflow.Fluent.BuildNode.Distort(System.UInt32,System.UInt32)
  id: Distort(System.UInt32,System.UInt32)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: Distort(UInt32, UInt32)
  nameWithType: BuildNode.Distort(UInt32, UInt32)
  fullName: Imageflow.Fluent.BuildNode.Distort(System.UInt32, System.UInt32)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Distort
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 92
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nDistort the image to exactly the given dimensions.\n"
  example: []
  syntax:
    content: public BuildNode Distort(uint w, uint h)
    parameters:
    - id: w
      type: System.UInt32
      description: ''
    - id: h
      type: System.UInt32
      description: ''
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function Distort(w As UInteger, h As UInteger) As BuildNode
  overload: Imageflow.Fluent.BuildNode.Distort*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.Distort(System.UInt32,System.UInt32,Imageflow.Fluent.ResampleHints)
  commentId: M:Imageflow.Fluent.BuildNode.Distort(System.UInt32,System.UInt32,Imageflow.Fluent.ResampleHints)
  id: Distort(System.UInt32,System.UInt32,Imageflow.Fluent.ResampleHints)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: Distort(UInt32, UInt32, ResampleHints)
  nameWithType: BuildNode.Distort(UInt32, UInt32, ResampleHints)
  fullName: Imageflow.Fluent.BuildNode.Distort(System.UInt32, System.UInt32, Imageflow.Fluent.ResampleHints)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Distort
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 100
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nDistort the image to exactly the given dimensions.\n"
  example: []
  syntax:
    content: public BuildNode Distort(uint w, uint h, ResampleHints hints)
    parameters:
    - id: w
      type: System.UInt32
      description: ''
    - id: h
      type: System.UInt32
      description: ''
    - id: hints
      type: Imageflow.Fluent.ResampleHints
      description: ''
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function Distort(w As UInteger, h As UInteger, hints As ResampleHints) As BuildNode
  overload: Imageflow.Fluent.BuildNode.Distort*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.Crop(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:Imageflow.Fluent.BuildNode.Crop(System.Int32,System.Int32,System.Int32,System.Int32)
  id: Crop(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: Crop(Int32, Int32, Int32, Int32)
  nameWithType: BuildNode.Crop(Int32, Int32, Int32, Int32)
  fullName: Imageflow.Fluent.BuildNode.Crop(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Crop
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 119
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nCrops the image to the given coordinates\n"
  example: []
  syntax:
    content: public BuildNode Crop(int x1, int y1, int x2, int y2)
    parameters:
    - id: x1
      type: System.Int32
      description: ''
    - id: y1
      type: System.Int32
      description: ''
    - id: x2
      type: System.Int32
      description: ''
    - id: y2
      type: System.Int32
      description: ''
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function Crop(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer) As BuildNode
  overload: Imageflow.Fluent.BuildNode.Crop*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.Region(System.Int32,System.Int32,System.Int32,System.Int32,Imageflow.Fluent.AnyColor)
  commentId: M:Imageflow.Fluent.BuildNode.Region(System.Int32,System.Int32,System.Int32,System.Int32,Imageflow.Fluent.AnyColor)
  id: Region(System.Int32,System.Int32,System.Int32,System.Int32,Imageflow.Fluent.AnyColor)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: Region(Int32, Int32, Int32, Int32, AnyColor)
  nameWithType: BuildNode.Region(Int32, Int32, Int32, Int32, AnyColor)
  fullName: Imageflow.Fluent.BuildNode.Region(System.Int32, System.Int32, System.Int32, System.Int32, Imageflow.Fluent.AnyColor)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Region
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 141
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nRegion is like a crop command, but you can specify coordinates outside of the image and\nthereby add padding. It&apos;s like a window. Coordinates are in pixels.\n"
  example: []
  syntax:
    content: public BuildNode Region(int x1, int y1, int x2, int y2, AnyColor backgroundColor)
    parameters:
    - id: x1
      type: System.Int32
      description: ''
    - id: y1
      type: System.Int32
      description: ''
    - id: x2
      type: System.Int32
      description: ''
    - id: y2
      type: System.Int32
      description: ''
    - id: backgroundColor
      type: Imageflow.Fluent.AnyColor
      description: ''
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function Region(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, backgroundColor As AnyColor) As BuildNode
  overload: Imageflow.Fluent.BuildNode.Region*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.RegionPercent(System.Single,System.Single,System.Single,System.Single,Imageflow.Fluent.AnyColor)
  commentId: M:Imageflow.Fluent.BuildNode.RegionPercent(System.Single,System.Single,System.Single,System.Single,Imageflow.Fluent.AnyColor)
  id: RegionPercent(System.Single,System.Single,System.Single,System.Single,Imageflow.Fluent.AnyColor)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: RegionPercent(Single, Single, Single, Single, AnyColor)
  nameWithType: BuildNode.RegionPercent(Single, Single, Single, Single, AnyColor)
  fullName: Imageflow.Fluent.BuildNode.RegionPercent(System.Single, System.Single, System.Single, System.Single, Imageflow.Fluent.AnyColor)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: RegionPercent
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 165
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nRegion is like a crop command, but you can specify coordinates outside of the image and\nthereby add padding. It&apos;s like a window.\nYou can specify a region as a percentage of the image&apos;s width and height.\n"
  example: []
  syntax:
    content: public BuildNode RegionPercent(float x1, float y1, float x2, float y2, AnyColor backgroundColor)
    parameters:
    - id: x1
      type: System.Single
      description: ''
    - id: y1
      type: System.Single
      description: ''
    - id: x2
      type: System.Single
      description: ''
    - id: y2
      type: System.Single
      description: ''
    - id: backgroundColor
      type: Imageflow.Fluent.AnyColor
      description: ''
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function RegionPercent(x1 As Single, y1 As Single, x2 As Single, y2 As Single, backgroundColor As AnyColor) As BuildNode
  overload: Imageflow.Fluent.BuildNode.RegionPercent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.CropWhitespace(System.Int32,System.Single)
  commentId: M:Imageflow.Fluent.BuildNode.CropWhitespace(System.Int32,System.Single)
  id: CropWhitespace(System.Int32,System.Single)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: CropWhitespace(Int32, Single)
  nameWithType: BuildNode.CropWhitespace(Int32, Single)
  fullName: Imageflow.Fluent.BuildNode.CropWhitespace(System.Int32, System.Single)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: CropWhitespace
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 186
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nCrops away whitespace of any color at the edges of the image. \n"
  example: []
  syntax:
    content: public BuildNode CropWhitespace(int threshold, float percentPadding)
    parameters:
    - id: threshold
      type: System.Int32
      description: >-
        (1..255). determines how much noise/edges to tolerate before cropping

        is finalized. 80 is a good starting point.
    - id: percentPadding
      type: System.Single
      description: >-
        determines how much of the image to restore after cropping to

        provide some padding. 0.5 (half a percent) is a good starting point.
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function CropWhitespace(threshold As Integer, percentPadding As Single) As BuildNode
  overload: Imageflow.Fluent.BuildNode.CropWhitespace*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.ResizerCommands(System.String)
  commentId: M:Imageflow.Fluent.BuildNode.ResizerCommands(System.String)
  id: ResizerCommands(System.String)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: ResizerCommands(String)
  nameWithType: BuildNode.ResizerCommands(String)
  fullName: Imageflow.Fluent.BuildNode.ResizerCommands(System.String)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: ResizerCommands
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 202
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nDoes not honor encoding or decoding parameters. Use ImageJob.BuildCommandString() instead unless\nyou are actually combining this node with others in a job. \n"
  example: []
  syntax:
    content: public BuildNode ResizerCommands(string commandString)
    parameters:
    - id: commandString
      type: System.String
      description: ''
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function ResizerCommands(commandString As String) As BuildNode
  overload: Imageflow.Fluent.BuildNode.ResizerCommands*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.FlipVertical
  commentId: M:Imageflow.Fluent.BuildNode.FlipVertical
  id: FlipVertical
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: FlipVertical()
  nameWithType: BuildNode.FlipVertical()
  fullName: Imageflow.Fluent.BuildNode.FlipVertical()
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: FlipVertical
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 216
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nFlips the image vertically\n"
  example: []
  syntax:
    content: public BuildNode FlipVertical()
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function FlipVertical As BuildNode
  overload: Imageflow.Fluent.BuildNode.FlipVertical*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.FlipHorizontal
  commentId: M:Imageflow.Fluent.BuildNode.FlipHorizontal
  id: FlipHorizontal
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: FlipHorizontal()
  nameWithType: BuildNode.FlipHorizontal()
  fullName: Imageflow.Fluent.BuildNode.FlipHorizontal()
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: FlipHorizontal
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 221
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nFlips the image horizontally\n"
  example: []
  syntax:
    content: public BuildNode FlipHorizontal()
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function FlipHorizontal As BuildNode
  overload: Imageflow.Fluent.BuildNode.FlipHorizontal*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.Rotate90
  commentId: M:Imageflow.Fluent.BuildNode.Rotate90
  id: Rotate90
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: Rotate90()
  nameWithType: BuildNode.Rotate90()
  fullName: Imageflow.Fluent.BuildNode.Rotate90()
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Rotate90
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 227
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nRotates the image 90 degrees clockwise. \n"
  example: []
  syntax:
    content: public BuildNode Rotate90()
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function Rotate90 As BuildNode
  overload: Imageflow.Fluent.BuildNode.Rotate90*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.Rotate180
  commentId: M:Imageflow.Fluent.BuildNode.Rotate180
  id: Rotate180
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: Rotate180()
  nameWithType: BuildNode.Rotate180()
  fullName: Imageflow.Fluent.BuildNode.Rotate180()
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Rotate180
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 232
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nRotates the image 180 degrees clockwise. \n"
  example: []
  syntax:
    content: public BuildNode Rotate180()
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function Rotate180 As BuildNode
  overload: Imageflow.Fluent.BuildNode.Rotate180*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.Rotate270
  commentId: M:Imageflow.Fluent.BuildNode.Rotate270
  id: Rotate270
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: Rotate270()
  nameWithType: BuildNode.Rotate270()
  fullName: Imageflow.Fluent.BuildNode.Rotate270()
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Rotate270
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 237
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nRotates the image 270 degrees clockwise. (same as 90 degrees counterclockwise). \n"
  example: []
  syntax:
    content: public BuildNode Rotate270()
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function Rotate270 As BuildNode
  overload: Imageflow.Fluent.BuildNode.Rotate270*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.Transpose
  commentId: M:Imageflow.Fluent.BuildNode.Transpose
  id: Transpose
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: Transpose()
  nameWithType: BuildNode.Transpose()
  fullName: Imageflow.Fluent.BuildNode.Transpose()
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Transpose
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 242
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nSwaps the x and y dimensions of the image\n"
  example: []
  syntax:
    content: public BuildNode Transpose()
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function Transpose As BuildNode
  overload: Imageflow.Fluent.BuildNode.Transpose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.Branch(System.Func{Imageflow.Fluent.BuildNode,Imageflow.Fluent.BuildEndpoint})
  commentId: M:Imageflow.Fluent.BuildNode.Branch(System.Func{Imageflow.Fluent.BuildNode,Imageflow.Fluent.BuildEndpoint})
  id: Branch(System.Func{Imageflow.Fluent.BuildNode,Imageflow.Fluent.BuildEndpoint})
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: Branch(Func<BuildNode, BuildEndpoint>)
  nameWithType: BuildNode.Branch(Func<BuildNode, BuildEndpoint>)
  fullName: Imageflow.Fluent.BuildNode.Branch(System.Func<Imageflow.Fluent.BuildNode, Imageflow.Fluent.BuildEndpoint>)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Branch
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 256
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nAllows you to generate multiple outputs by branching the graph\n<pre><code>var r = await b.Decode(imageBytes)\n    .Branch(f => f.EncodeToBytes(new WebPLosslessEncoder()))\n    .Branch(f => f.EncodeToBytes(new WebPLossyEncoder(50)))\n    .EncodeToBytes(new LibPngEncoder())\n    .Finish().InProcessAsync();</code></pre>\n"
  example: []
  syntax:
    content: public BuildNode Branch(Func<BuildNode, BuildEndpoint> f)
    parameters:
    - id: f
      type: System.Func{Imageflow.Fluent.BuildNode,Imageflow.Fluent.BuildEndpoint}
      description: ''
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function Branch(f As Func(Of BuildNode, BuildEndpoint)) As BuildNode
  overload: Imageflow.Fluent.BuildNode.Branch*
  nameWithType.vb: BuildNode.Branch(Func(Of BuildNode, BuildEndpoint))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Imageflow.Fluent.BuildNode.Branch(System.Func(Of Imageflow.Fluent.BuildNode, Imageflow.Fluent.BuildEndpoint))
  name.vb: Branch(Func(Of BuildNode, BuildEndpoint))
- uid: Imageflow.Fluent.BuildNode.CopyRectTo(Imageflow.Fluent.BuildNode,System.Drawing.Rectangle,System.Drawing.Point)
  commentId: M:Imageflow.Fluent.BuildNode.CopyRectTo(Imageflow.Fluent.BuildNode,System.Drawing.Rectangle,System.Drawing.Point)
  id: CopyRectTo(Imageflow.Fluent.BuildNode,System.Drawing.Rectangle,System.Drawing.Point)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: CopyRectTo(BuildNode, Rectangle, Point)
  nameWithType: BuildNode.CopyRectTo(BuildNode, Rectangle, Point)
  fullName: Imageflow.Fluent.BuildNode.CopyRectTo(Imageflow.Fluent.BuildNode, System.Drawing.Rectangle, System.Drawing.Point)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: CopyRectTo
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 270
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nCopies (not composes) the given rectangle from input to canvas.\nYou cannot copy from a BGRA input to a BGR canvas. \n"
  example: []
  syntax:
    content: public BuildNode CopyRectTo(BuildNode canvas, Rectangle area, Point to)
    parameters:
    - id: canvas
      type: Imageflow.Fluent.BuildNode
      description: ''
    - id: area
      type: System.Drawing.Rectangle
      description: ''
    - id: to
      type: System.Drawing.Point
      description: ''
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function CopyRectTo(canvas As BuildNode, area As Rectangle, to As Point) As BuildNode
  overload: Imageflow.Fluent.BuildNode.CopyRectTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.DrawImageExactTo(Imageflow.Fluent.BuildNode,System.Drawing.Rectangle,Imageflow.Fluent.ResampleHints,System.Nullable{Imageflow.Fluent.CompositingMode})
  commentId: M:Imageflow.Fluent.BuildNode.DrawImageExactTo(Imageflow.Fluent.BuildNode,System.Drawing.Rectangle,Imageflow.Fluent.ResampleHints,System.Nullable{Imageflow.Fluent.CompositingMode})
  id: DrawImageExactTo(Imageflow.Fluent.BuildNode,System.Drawing.Rectangle,Imageflow.Fluent.ResampleHints,System.Nullable{Imageflow.Fluent.CompositingMode})
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: DrawImageExactTo(BuildNode, Rectangle, ResampleHints, Nullable<CompositingMode>)
  nameWithType: BuildNode.DrawImageExactTo(BuildNode, Rectangle, ResampleHints, Nullable<CompositingMode>)
  fullName: Imageflow.Fluent.BuildNode.DrawImageExactTo(Imageflow.Fluent.BuildNode, System.Drawing.Rectangle, Imageflow.Fluent.ResampleHints, System.Nullable<Imageflow.Fluent.CompositingMode>)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: DrawImageExactTo
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 292
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nDraws the input image to the given rectangle on the canvas, distorting if the aspect ratios differ.\n\n"
  example: []
  syntax:
    content: public BuildNode DrawImageExactTo(BuildNode canvas, Rectangle to, ResampleHints hints, CompositingMode? blend)
    parameters:
    - id: canvas
      type: Imageflow.Fluent.BuildNode
      description: ''
    - id: to
      type: System.Drawing.Rectangle
      description: ''
    - id: hints
      type: Imageflow.Fluent.ResampleHints
      description: ''
    - id: blend
      type: System.Nullable{Imageflow.Fluent.CompositingMode}
      description: ''
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function DrawImageExactTo(canvas As BuildNode, to As Rectangle, hints As ResampleHints, blend As CompositingMode?) As BuildNode
  overload: Imageflow.Fluent.BuildNode.DrawImageExactTo*
  nameWithType.vb: BuildNode.DrawImageExactTo(BuildNode, Rectangle, ResampleHints, Nullable(Of CompositingMode))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Imageflow.Fluent.BuildNode.DrawImageExactTo(Imageflow.Fluent.BuildNode, System.Drawing.Rectangle, Imageflow.Fluent.ResampleHints, System.Nullable(Of Imageflow.Fluent.CompositingMode))
  name.vb: DrawImageExactTo(BuildNode, Rectangle, ResampleHints, Nullable(Of CompositingMode))
- uid: Imageflow.Fluent.BuildNode.FillRectangle(System.Int32,System.Int32,System.Int32,System.Int32,Imageflow.Fluent.AnyColor)
  commentId: M:Imageflow.Fluent.BuildNode.FillRectangle(System.Int32,System.Int32,System.Int32,System.Int32,Imageflow.Fluent.AnyColor)
  id: FillRectangle(System.Int32,System.Int32,System.Int32,System.Int32,Imageflow.Fluent.AnyColor)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: FillRectangle(Int32, Int32, Int32, Int32, AnyColor)
  nameWithType: BuildNode.FillRectangle(Int32, Int32, Int32, Int32, AnyColor)
  fullName: Imageflow.Fluent.BuildNode.FillRectangle(System.Int32, System.Int32, System.Int32, System.Int32, Imageflow.Fluent.AnyColor)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: FillRectangle
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 314
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nFills the given rectangle with the specified color\n"
  example: []
  syntax:
    content: public BuildNode FillRectangle(int x1, int y1, int x2, int y2, AnyColor color)
    parameters:
    - id: x1
      type: System.Int32
      description: ''
    - id: y1
      type: System.Int32
      description: ''
    - id: x2
      type: System.Int32
      description: ''
    - id: y2
      type: System.Int32
      description: ''
    - id: color
      type: Imageflow.Fluent.AnyColor
      description: ''
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function FillRectangle(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, color As AnyColor) As BuildNode
  overload: Imageflow.Fluent.BuildNode.FillRectangle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.ExpandCanvas(System.Int32,System.Int32,System.Int32,System.Int32,Imageflow.Fluent.AnyColor)
  commentId: M:Imageflow.Fluent.BuildNode.ExpandCanvas(System.Int32,System.Int32,System.Int32,System.Int32,Imageflow.Fluent.AnyColor)
  id: ExpandCanvas(System.Int32,System.Int32,System.Int32,System.Int32,Imageflow.Fluent.AnyColor)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: ExpandCanvas(Int32, Int32, Int32, Int32, AnyColor)
  nameWithType: BuildNode.ExpandCanvas(Int32, Int32, Int32, Int32, AnyColor)
  fullName: Imageflow.Fluent.BuildNode.ExpandCanvas(System.Int32, System.Int32, System.Int32, System.Int32, Imageflow.Fluent.AnyColor)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: ExpandCanvas
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 336
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nAdds padding of the given color by enlarging the canvas on the sides specified.\n"
  example: []
  syntax:
    content: public BuildNode ExpandCanvas(int left, int top, int right, int bottom, AnyColor color)
    parameters:
    - id: left
      type: System.Int32
      description: ''
    - id: top
      type: System.Int32
      description: ''
    - id: right
      type: System.Int32
      description: ''
    - id: bottom
      type: System.Int32
      description: ''
    - id: color
      type: Imageflow.Fluent.AnyColor
      description: ''
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function ExpandCanvas(left As Integer, top As Integer, right As Integer, bottom As Integer, color As AnyColor) As BuildNode
  overload: Imageflow.Fluent.BuildNode.ExpandCanvas*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.WhiteBalanceSrgb(System.Int32)
  commentId: M:Imageflow.Fluent.BuildNode.WhiteBalanceSrgb(System.Int32)
  id: WhiteBalanceSrgb(System.Int32)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: WhiteBalanceSrgb(Int32)
  nameWithType: BuildNode.WhiteBalanceSrgb(Int32)
  fullName: Imageflow.Fluent.BuildNode.WhiteBalanceSrgb(System.Int32)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: WhiteBalanceSrgb
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 353
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nThis command is not endorsed as it operates in the sRGB space and does not produce perfect results.\n"
  example: []
  syntax:
    content: public BuildNode WhiteBalanceSrgb(int threshold)
    parameters:
    - id: threshold
      type: System.Int32
      description: ''
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function WhiteBalanceSrgb(threshold As Integer) As BuildNode
  overload: Imageflow.Fluent.BuildNode.WhiteBalanceSrgb*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.TransparencySrgb(System.Single)
  commentId: M:Imageflow.Fluent.BuildNode.TransparencySrgb(System.Single)
  id: TransparencySrgb(System.Single)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: TransparencySrgb(Single)
  nameWithType: BuildNode.TransparencySrgb(Single)
  fullName: Imageflow.Fluent.BuildNode.TransparencySrgb(System.Single)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: TransparencySrgb
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 367
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nSet the transparency of the image from 0 (transparent) to 1 (opaque)\n"
  example: []
  syntax:
    content: public BuildNode TransparencySrgb(float opacity)
    parameters:
    - id: opacity
      type: System.Single
      description: ''
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function TransparencySrgb(opacity As Single) As BuildNode
  overload: Imageflow.Fluent.BuildNode.TransparencySrgb*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.ContrastSrgb(System.Single)
  commentId: M:Imageflow.Fluent.BuildNode.ContrastSrgb(System.Single)
  id: ContrastSrgb(System.Single)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: ContrastSrgb(Single)
  nameWithType: BuildNode.ContrastSrgb(Single)
  fullName: Imageflow.Fluent.BuildNode.ContrastSrgb(System.Single)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: ContrastSrgb
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 381
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nAdjust contrast between -1 and 1. \n"
  example: []
  syntax:
    content: public BuildNode ContrastSrgb(float amount)
    parameters:
    - id: amount
      type: System.Single
      description: -1...1
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function ContrastSrgb(amount As Single) As BuildNode
  overload: Imageflow.Fluent.BuildNode.ContrastSrgb*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.BrightnessSrgb(System.Single)
  commentId: M:Imageflow.Fluent.BuildNode.BrightnessSrgb(System.Single)
  id: BrightnessSrgb(System.Single)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: BrightnessSrgb(Single)
  nameWithType: BuildNode.BrightnessSrgb(Single)
  fullName: Imageflow.Fluent.BuildNode.BrightnessSrgb(System.Single)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: BrightnessSrgb
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 395
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nAdjust brightness between -1 and 1. \n"
  example: []
  syntax:
    content: public BuildNode BrightnessSrgb(float amount)
    parameters:
    - id: amount
      type: System.Single
      description: -1...1
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function BrightnessSrgb(amount As Single) As BuildNode
  overload: Imageflow.Fluent.BuildNode.BrightnessSrgb*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.SaturationSrgb(System.Single)
  commentId: M:Imageflow.Fluent.BuildNode.SaturationSrgb(System.Single)
  id: SaturationSrgb(System.Single)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: SaturationSrgb(Single)
  nameWithType: BuildNode.SaturationSrgb(Single)
  fullName: Imageflow.Fluent.BuildNode.SaturationSrgb(System.Single)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: SaturationSrgb
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 409
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nAdjust saturation between -1 and 1. \n"
  example: []
  syntax:
    content: public BuildNode SaturationSrgb(float amount)
    parameters:
    - id: amount
      type: System.Single
      description: -1...1
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function SaturationSrgb(amount As Single) As BuildNode
  overload: Imageflow.Fluent.BuildNode.SaturationSrgb*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.ColorFilterSrgb(Imageflow.Fluent.ColorFilterSrgb)
  commentId: M:Imageflow.Fluent.BuildNode.ColorFilterSrgb(Imageflow.Fluent.ColorFilterSrgb)
  id: ColorFilterSrgb(Imageflow.Fluent.ColorFilterSrgb)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: ColorFilterSrgb(ColorFilterSrgb)
  nameWithType: BuildNode.ColorFilterSrgb(ColorFilterSrgb)
  fullName: Imageflow.Fluent.BuildNode.ColorFilterSrgb(Imageflow.Fluent.ColorFilterSrgb)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: ColorFilterSrgb
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 423
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nApply filters like grayscale, sepia, or inversion in the sRGB color space\n"
  example: []
  syntax:
    content: public BuildNode ColorFilterSrgb(ColorFilterSrgb filter)
    parameters:
    - id: filter
      type: Imageflow.Fluent.ColorFilterSrgb
      description: ''
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function ColorFilterSrgb(filter As ColorFilterSrgb) As BuildNode
  overload: Imageflow.Fluent.BuildNode.ColorFilterSrgb*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.Watermark(Imageflow.Fluent.IBytesSource,Imageflow.Fluent.WatermarkOptions)
  commentId: M:Imageflow.Fluent.BuildNode.Watermark(Imageflow.Fluent.IBytesSource,Imageflow.Fluent.WatermarkOptions)
  id: Watermark(Imageflow.Fluent.IBytesSource,Imageflow.Fluent.WatermarkOptions)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: Watermark(IBytesSource, WatermarkOptions)
  nameWithType: BuildNode.Watermark(IBytesSource, WatermarkOptions)
  fullName: Imageflow.Fluent.BuildNode.Watermark(Imageflow.Fluent.IBytesSource, Imageflow.Fluent.WatermarkOptions)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Watermark
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 435
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nDraw a watermark from the given BytesSource or StreamSource\n"
  example: []
  syntax:
    content: public BuildNode Watermark(IBytesSource source, WatermarkOptions watermark)
    parameters:
    - id: source
      type: Imageflow.Fluent.IBytesSource
      description: ''
    - id: watermark
      type: Imageflow.Fluent.WatermarkOptions
      description: ''
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function Watermark(source As IBytesSource, watermark As WatermarkOptions) As BuildNode
  overload: Imageflow.Fluent.BuildNode.Watermark*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Imageflow.Fluent.BuildNode.Watermark(Imageflow.Fluent.IBytesSource,System.Nullable{System.Int32},Imageflow.Fluent.WatermarkOptions)
  commentId: M:Imageflow.Fluent.BuildNode.Watermark(Imageflow.Fluent.IBytesSource,System.Nullable{System.Int32},Imageflow.Fluent.WatermarkOptions)
  id: Watermark(Imageflow.Fluent.IBytesSource,System.Nullable{System.Int32},Imageflow.Fluent.WatermarkOptions)
  parent: Imageflow.Fluent.BuildNode
  langs:
  - csharp
  - vb
  name: Watermark(IBytesSource, Nullable<Int32>, WatermarkOptions)
  nameWithType: BuildNode.Watermark(IBytesSource, Nullable<Int32>, WatermarkOptions)
  fullName: Imageflow.Fluent.BuildNode.Watermark(Imageflow.Fluent.IBytesSource, System.Nullable<System.Int32>, Imageflow.Fluent.WatermarkOptions)
  type: Method
  source:
    remote:
      path: src/Imageflow/Fluent/BuildNode.cs
      branch: afe61840f61473443028d5b1d7dfa38420e778a5
      repo: https://github.com/anshulrgoyal/imageflow-dotnet
    id: Watermark
    path: src/Imageflow/Fluent/BuildNode.cs
    startLine: 445
  assemblies:
  - Imageflow.Net
  namespace: Imageflow.Fluent
  summary: "\nDraw a watermark from the given BytesSource or StreamSource\n"
  example: []
  syntax:
    content: public BuildNode Watermark(IBytesSource source, int? ioId, WatermarkOptions watermark)
    parameters:
    - id: source
      type: Imageflow.Fluent.IBytesSource
      description: ''
    - id: ioId
      type: System.Nullable{System.Int32}
      description: ''
    - id: watermark
      type: Imageflow.Fluent.WatermarkOptions
      description: ''
    return:
      type: Imageflow.Fluent.BuildNode
      description: ''
    content.vb: Public Function Watermark(source As IBytesSource, ioId As Integer?, watermark As WatermarkOptions) As BuildNode
  overload: Imageflow.Fluent.BuildNode.Watermark*
  nameWithType.vb: BuildNode.Watermark(IBytesSource, Nullable(Of Int32), WatermarkOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Imageflow.Fluent.BuildNode.Watermark(Imageflow.Fluent.IBytesSource, System.Nullable(Of System.Int32), Imageflow.Fluent.WatermarkOptions)
  name.vb: Watermark(IBytesSource, Nullable(Of Int32), WatermarkOptions)
references:
- uid: Imageflow.Fluent
  commentId: N:Imageflow.Fluent
  name: Imageflow.Fluent
  nameWithType: Imageflow.Fluent
  fullName: Imageflow.Fluent
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Imageflow.Fluent.BuildItemBase
  commentId: T:Imageflow.Fluent.BuildItemBase
  parent: Imageflow.Fluent
  name: BuildItemBase
  nameWithType: BuildItemBase
  fullName: Imageflow.Fluent.BuildItemBase
- uid: Imageflow.Fluent.BuildItemBase.Equals(System.Object)
  commentId: M:Imageflow.Fluent.BuildItemBase.Equals(System.Object)
  parent: Imageflow.Fluent.BuildItemBase
  isExternal: true
  name: Equals(Object)
  nameWithType: BuildItemBase.Equals(Object)
  fullName: Imageflow.Fluent.BuildItemBase.Equals(System.Object)
  spec.csharp:
  - uid: Imageflow.Fluent.BuildItemBase.Equals(System.Object)
    name: Equals
    nameWithType: BuildItemBase.Equals
    fullName: Imageflow.Fluent.BuildItemBase.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Imageflow.Fluent.BuildItemBase.Equals(System.Object)
    name: Equals
    nameWithType: BuildItemBase.Equals
    fullName: Imageflow.Fluent.BuildItemBase.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Imageflow.Fluent.BuildItemBase.GetHashCode
  commentId: M:Imageflow.Fluent.BuildItemBase.GetHashCode
  parent: Imageflow.Fluent.BuildItemBase
  name: GetHashCode()
  nameWithType: BuildItemBase.GetHashCode()
  fullName: Imageflow.Fluent.BuildItemBase.GetHashCode()
  spec.csharp:
  - uid: Imageflow.Fluent.BuildItemBase.GetHashCode
    name: GetHashCode
    nameWithType: BuildItemBase.GetHashCode
    fullName: Imageflow.Fluent.BuildItemBase.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Imageflow.Fluent.BuildItemBase.GetHashCode
    name: GetHashCode
    nameWithType: BuildItemBase.GetHashCode
    fullName: Imageflow.Fluent.BuildItemBase.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Imageflow.Fluent.BuildNode.Encode*
  commentId: Overload:Imageflow.Fluent.BuildNode.Encode
  name: Encode
  nameWithType: BuildNode.Encode
  fullName: Imageflow.Fluent.BuildNode.Encode
- uid: Imageflow.Fluent.IOutputDestination
  commentId: T:Imageflow.Fluent.IOutputDestination
  parent: Imageflow.Fluent
  name: IOutputDestination
  nameWithType: IOutputDestination
  fullName: Imageflow.Fluent.IOutputDestination
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Imageflow.Fluent.IEncoderPreset
  commentId: T:Imageflow.Fluent.IEncoderPreset
  parent: Imageflow.Fluent
  name: IEncoderPreset
  nameWithType: IEncoderPreset
  fullName: Imageflow.Fluent.IEncoderPreset
- uid: Imageflow.Fluent.BuildEndpoint
  commentId: T:Imageflow.Fluent.BuildEndpoint
  parent: Imageflow.Fluent
  name: BuildEndpoint
  nameWithType: BuildEndpoint
  fullName: Imageflow.Fluent.BuildEndpoint
- uid: Imageflow.Fluent.BuildNode.EncodeToBytes*
  commentId: Overload:Imageflow.Fluent.BuildNode.EncodeToBytes
  name: EncodeToBytes
  nameWithType: BuildNode.EncodeToBytes
  fullName: Imageflow.Fluent.BuildNode.EncodeToBytes
- uid: Imageflow.Fluent.BuildNode.EncodeToStream*
  commentId: Overload:Imageflow.Fluent.BuildNode.EncodeToStream
  name: EncodeToStream
  nameWithType: BuildNode.EncodeToStream
  fullName: Imageflow.Fluent.BuildNode.EncodeToStream
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Imageflow.Fluent.BuildNode.ConstrainWithin*
  commentId: Overload:Imageflow.Fluent.BuildNode.ConstrainWithin
  name: ConstrainWithin
  nameWithType: BuildNode.ConstrainWithin
  fullName: Imageflow.Fluent.BuildNode.ConstrainWithin
- uid: System.Nullable{System.UInt32}
  commentId: T:System.Nullable{System.UInt32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<UInt32>
  nameWithType: Nullable<UInt32>
  fullName: System.Nullable<System.UInt32>
  nameWithType.vb: Nullable(Of UInt32)
  fullName.vb: System.Nullable(Of System.UInt32)
  name.vb: Nullable(Of UInt32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Imageflow.Fluent.BuildNode
  commentId: T:Imageflow.Fluent.BuildNode
  parent: Imageflow.Fluent
  name: BuildNode
  nameWithType: BuildNode
  fullName: Imageflow.Fluent.BuildNode
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Imageflow.Fluent.ResampleHints
  commentId: T:Imageflow.Fluent.ResampleHints
  parent: Imageflow.Fluent
  name: ResampleHints
  nameWithType: ResampleHints
  fullName: Imageflow.Fluent.ResampleHints
- uid: Imageflow.Fluent.BuildNode.Constrain*
  commentId: Overload:Imageflow.Fluent.BuildNode.Constrain
  name: Constrain
  nameWithType: BuildNode.Constrain
  fullName: Imageflow.Fluent.BuildNode.Constrain
- uid: Imageflow.Fluent.Constraint
  commentId: T:Imageflow.Fluent.Constraint
  parent: Imageflow.Fluent
  name: Constraint
  nameWithType: Constraint
  fullName: Imageflow.Fluent.Constraint
- uid: Imageflow.Fluent.BuildNode.Distort*
  commentId: Overload:Imageflow.Fluent.BuildNode.Distort
  name: Distort
  nameWithType: BuildNode.Distort
  fullName: Imageflow.Fluent.BuildNode.Distort
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Imageflow.Fluent.BuildNode.Crop*
  commentId: Overload:Imageflow.Fluent.BuildNode.Crop
  name: Crop
  nameWithType: BuildNode.Crop
  fullName: Imageflow.Fluent.BuildNode.Crop
- uid: Imageflow.Fluent.BuildNode.Region*
  commentId: Overload:Imageflow.Fluent.BuildNode.Region
  name: Region
  nameWithType: BuildNode.Region
  fullName: Imageflow.Fluent.BuildNode.Region
- uid: Imageflow.Fluent.AnyColor
  commentId: T:Imageflow.Fluent.AnyColor
  parent: Imageflow.Fluent
  name: AnyColor
  nameWithType: AnyColor
  fullName: Imageflow.Fluent.AnyColor
- uid: Imageflow.Fluent.BuildNode.RegionPercent*
  commentId: Overload:Imageflow.Fluent.BuildNode.RegionPercent
  name: RegionPercent
  nameWithType: BuildNode.RegionPercent
  fullName: Imageflow.Fluent.BuildNode.RegionPercent
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Imageflow.Fluent.BuildNode.CropWhitespace*
  commentId: Overload:Imageflow.Fluent.BuildNode.CropWhitespace
  name: CropWhitespace
  nameWithType: BuildNode.CropWhitespace
  fullName: Imageflow.Fluent.BuildNode.CropWhitespace
- uid: Imageflow.Fluent.BuildNode.ResizerCommands*
  commentId: Overload:Imageflow.Fluent.BuildNode.ResizerCommands
  name: ResizerCommands
  nameWithType: BuildNode.ResizerCommands
  fullName: Imageflow.Fluent.BuildNode.ResizerCommands
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Imageflow.Fluent.BuildNode.FlipVertical*
  commentId: Overload:Imageflow.Fluent.BuildNode.FlipVertical
  name: FlipVertical
  nameWithType: BuildNode.FlipVertical
  fullName: Imageflow.Fluent.BuildNode.FlipVertical
- uid: Imageflow.Fluent.BuildNode.FlipHorizontal*
  commentId: Overload:Imageflow.Fluent.BuildNode.FlipHorizontal
  name: FlipHorizontal
  nameWithType: BuildNode.FlipHorizontal
  fullName: Imageflow.Fluent.BuildNode.FlipHorizontal
- uid: Imageflow.Fluent.BuildNode.Rotate90*
  commentId: Overload:Imageflow.Fluent.BuildNode.Rotate90
  name: Rotate90
  nameWithType: BuildNode.Rotate90
  fullName: Imageflow.Fluent.BuildNode.Rotate90
- uid: Imageflow.Fluent.BuildNode.Rotate180*
  commentId: Overload:Imageflow.Fluent.BuildNode.Rotate180
  name: Rotate180
  nameWithType: BuildNode.Rotate180
  fullName: Imageflow.Fluent.BuildNode.Rotate180
- uid: Imageflow.Fluent.BuildNode.Rotate270*
  commentId: Overload:Imageflow.Fluent.BuildNode.Rotate270
  name: Rotate270
  nameWithType: BuildNode.Rotate270
  fullName: Imageflow.Fluent.BuildNode.Rotate270
- uid: Imageflow.Fluent.BuildNode.Transpose*
  commentId: Overload:Imageflow.Fluent.BuildNode.Transpose
  name: Transpose
  nameWithType: BuildNode.Transpose
  fullName: Imageflow.Fluent.BuildNode.Transpose
- uid: Imageflow.Fluent.BuildNode.Branch*
  commentId: Overload:Imageflow.Fluent.BuildNode.Branch
  name: Branch
  nameWithType: BuildNode.Branch
  fullName: Imageflow.Fluent.BuildNode.Branch
- uid: System.Func{Imageflow.Fluent.BuildNode,Imageflow.Fluent.BuildEndpoint}
  commentId: T:System.Func{Imageflow.Fluent.BuildNode,Imageflow.Fluent.BuildEndpoint}
  parent: System
  definition: System.Func`2
  name: Func<BuildNode, BuildEndpoint>
  nameWithType: Func<BuildNode, BuildEndpoint>
  fullName: System.Func<Imageflow.Fluent.BuildNode, Imageflow.Fluent.BuildEndpoint>
  nameWithType.vb: Func(Of BuildNode, BuildEndpoint)
  fullName.vb: System.Func(Of Imageflow.Fluent.BuildNode, Imageflow.Fluent.BuildEndpoint)
  name.vb: Func(Of BuildNode, BuildEndpoint)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Imageflow.Fluent.BuildNode
    name: BuildNode
    nameWithType: BuildNode
    fullName: Imageflow.Fluent.BuildNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Imageflow.Fluent.BuildEndpoint
    name: BuildEndpoint
    nameWithType: BuildEndpoint
    fullName: Imageflow.Fluent.BuildEndpoint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Imageflow.Fluent.BuildNode
    name: BuildNode
    nameWithType: BuildNode
    fullName: Imageflow.Fluent.BuildNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Imageflow.Fluent.BuildEndpoint
    name: BuildEndpoint
    nameWithType: BuildEndpoint
    fullName: Imageflow.Fluent.BuildEndpoint
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Imageflow.Fluent.BuildNode.CopyRectTo*
  commentId: Overload:Imageflow.Fluent.BuildNode.CopyRectTo
  name: CopyRectTo
  nameWithType: BuildNode.CopyRectTo
  fullName: Imageflow.Fluent.BuildNode.CopyRectTo
- uid: System.Drawing.Rectangle
  commentId: T:System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: true
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Drawing.Point
  commentId: T:System.Drawing.Point
  parent: System.Drawing
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: System.Drawing.Point
- uid: System.Drawing
  commentId: N:System.Drawing
  isExternal: true
  name: System.Drawing
  nameWithType: System.Drawing
  fullName: System.Drawing
- uid: Imageflow.Fluent.BuildNode.DrawImageExactTo*
  commentId: Overload:Imageflow.Fluent.BuildNode.DrawImageExactTo
  name: DrawImageExactTo
  nameWithType: BuildNode.DrawImageExactTo
  fullName: Imageflow.Fluent.BuildNode.DrawImageExactTo
- uid: System.Nullable{Imageflow.Fluent.CompositingMode}
  commentId: T:System.Nullable{Imageflow.Fluent.CompositingMode}
  parent: System
  definition: System.Nullable`1
  name: Nullable<CompositingMode>
  nameWithType: Nullable<CompositingMode>
  fullName: System.Nullable<Imageflow.Fluent.CompositingMode>
  nameWithType.vb: Nullable(Of CompositingMode)
  fullName.vb: System.Nullable(Of Imageflow.Fluent.CompositingMode)
  name.vb: Nullable(Of CompositingMode)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Imageflow.Fluent.CompositingMode
    name: CompositingMode
    nameWithType: CompositingMode
    fullName: Imageflow.Fluent.CompositingMode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Imageflow.Fluent.CompositingMode
    name: CompositingMode
    nameWithType: CompositingMode
    fullName: Imageflow.Fluent.CompositingMode
  - name: )
    nameWithType: )
    fullName: )
- uid: Imageflow.Fluent.BuildNode.FillRectangle*
  commentId: Overload:Imageflow.Fluent.BuildNode.FillRectangle
  name: FillRectangle
  nameWithType: BuildNode.FillRectangle
  fullName: Imageflow.Fluent.BuildNode.FillRectangle
- uid: Imageflow.Fluent.BuildNode.ExpandCanvas*
  commentId: Overload:Imageflow.Fluent.BuildNode.ExpandCanvas
  name: ExpandCanvas
  nameWithType: BuildNode.ExpandCanvas
  fullName: Imageflow.Fluent.BuildNode.ExpandCanvas
- uid: Imageflow.Fluent.BuildNode.WhiteBalanceSrgb*
  commentId: Overload:Imageflow.Fluent.BuildNode.WhiteBalanceSrgb
  name: WhiteBalanceSrgb
  nameWithType: BuildNode.WhiteBalanceSrgb
  fullName: Imageflow.Fluent.BuildNode.WhiteBalanceSrgb
- uid: Imageflow.Fluent.BuildNode.TransparencySrgb*
  commentId: Overload:Imageflow.Fluent.BuildNode.TransparencySrgb
  name: TransparencySrgb
  nameWithType: BuildNode.TransparencySrgb
  fullName: Imageflow.Fluent.BuildNode.TransparencySrgb
- uid: Imageflow.Fluent.BuildNode.ContrastSrgb*
  commentId: Overload:Imageflow.Fluent.BuildNode.ContrastSrgb
  name: ContrastSrgb
  nameWithType: BuildNode.ContrastSrgb
  fullName: Imageflow.Fluent.BuildNode.ContrastSrgb
- uid: Imageflow.Fluent.BuildNode.BrightnessSrgb*
  commentId: Overload:Imageflow.Fluent.BuildNode.BrightnessSrgb
  name: BrightnessSrgb
  nameWithType: BuildNode.BrightnessSrgb
  fullName: Imageflow.Fluent.BuildNode.BrightnessSrgb
- uid: Imageflow.Fluent.BuildNode.SaturationSrgb*
  commentId: Overload:Imageflow.Fluent.BuildNode.SaturationSrgb
  name: SaturationSrgb
  nameWithType: BuildNode.SaturationSrgb
  fullName: Imageflow.Fluent.BuildNode.SaturationSrgb
- uid: Imageflow.Fluent.BuildNode.ColorFilterSrgb*
  commentId: Overload:Imageflow.Fluent.BuildNode.ColorFilterSrgb
  name: ColorFilterSrgb
  nameWithType: BuildNode.ColorFilterSrgb
  fullName: Imageflow.Fluent.BuildNode.ColorFilterSrgb
- uid: Imageflow.Fluent.ColorFilterSrgb
  commentId: T:Imageflow.Fluent.ColorFilterSrgb
  parent: Imageflow.Fluent
  name: ColorFilterSrgb
  nameWithType: ColorFilterSrgb
  fullName: Imageflow.Fluent.ColorFilterSrgb
- uid: Imageflow.Fluent.BuildNode.Watermark*
  commentId: Overload:Imageflow.Fluent.BuildNode.Watermark
  name: Watermark
  nameWithType: BuildNode.Watermark
  fullName: Imageflow.Fluent.BuildNode.Watermark
- uid: Imageflow.Fluent.IBytesSource
  commentId: T:Imageflow.Fluent.IBytesSource
  parent: Imageflow.Fluent
  name: IBytesSource
  nameWithType: IBytesSource
  fullName: Imageflow.Fluent.IBytesSource
- uid: Imageflow.Fluent.WatermarkOptions
  commentId: T:Imageflow.Fluent.WatermarkOptions
  parent: Imageflow.Fluent
  name: WatermarkOptions
  nameWithType: WatermarkOptions
  fullName: Imageflow.Fluent.WatermarkOptions
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
